/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesRmaPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesRmaPostRequest{}

// V1DevicesRmaPostRequest struct for V1DevicesRmaPostRequest
type V1DevicesRmaPostRequest struct {
	CurrentDeviceId *int64 `json:"currentDeviceId,omitempty"`
	NewDeviceId *int64 `json:"newDeviceId,omitempty"`
}

// NewV1DevicesRmaPostRequest instantiates a new V1DevicesRmaPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesRmaPostRequest() *V1DevicesRmaPostRequest {
	this := V1DevicesRmaPostRequest{}
	return &this
}

// NewV1DevicesRmaPostRequestWithDefaults instantiates a new V1DevicesRmaPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesRmaPostRequestWithDefaults() *V1DevicesRmaPostRequest {
	this := V1DevicesRmaPostRequest{}
	return &this
}

// GetCurrentDeviceId returns the CurrentDeviceId field value if set, zero value otherwise.
func (o *V1DevicesRmaPostRequest) GetCurrentDeviceId() int64 {
	if o == nil || IsNil(o.CurrentDeviceId) {
		var ret int64
		return ret
	}
	return *o.CurrentDeviceId
}

// GetCurrentDeviceIdOk returns a tuple with the CurrentDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesRmaPostRequest) GetCurrentDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrentDeviceId) {
		return nil, false
	}
	return o.CurrentDeviceId, true
}

// HasCurrentDeviceId returns a boolean if a field has been set.
func (o *V1DevicesRmaPostRequest) HasCurrentDeviceId() bool {
	if o != nil && !IsNil(o.CurrentDeviceId) {
		return true
	}

	return false
}

// SetCurrentDeviceId gets a reference to the given int64 and assigns it to the CurrentDeviceId field.
func (o *V1DevicesRmaPostRequest) SetCurrentDeviceId(v int64) {
	o.CurrentDeviceId = &v
}

// GetNewDeviceId returns the NewDeviceId field value if set, zero value otherwise.
func (o *V1DevicesRmaPostRequest) GetNewDeviceId() int64 {
	if o == nil || IsNil(o.NewDeviceId) {
		var ret int64
		return ret
	}
	return *o.NewDeviceId
}

// GetNewDeviceIdOk returns a tuple with the NewDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesRmaPostRequest) GetNewDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NewDeviceId) {
		return nil, false
	}
	return o.NewDeviceId, true
}

// HasNewDeviceId returns a boolean if a field has been set.
func (o *V1DevicesRmaPostRequest) HasNewDeviceId() bool {
	if o != nil && !IsNil(o.NewDeviceId) {
		return true
	}

	return false
}

// SetNewDeviceId gets a reference to the given int64 and assigns it to the NewDeviceId field.
func (o *V1DevicesRmaPostRequest) SetNewDeviceId(v int64) {
	o.NewDeviceId = &v
}

func (o V1DevicesRmaPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesRmaPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentDeviceId) {
		toSerialize["currentDeviceId"] = o.CurrentDeviceId
	}
	if !IsNil(o.NewDeviceId) {
		toSerialize["newDeviceId"] = o.NewDeviceId
	}
	return toSerialize, nil
}

type NullableV1DevicesRmaPostRequest struct {
	value *V1DevicesRmaPostRequest
	isSet bool
}

func (v NullableV1DevicesRmaPostRequest) Get() *V1DevicesRmaPostRequest {
	return v.value
}

func (v *NullableV1DevicesRmaPostRequest) Set(val *V1DevicesRmaPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesRmaPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesRmaPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesRmaPostRequest(val *V1DevicesRmaPostRequest) *NullableV1DevicesRmaPostRequest {
	return &NullableV1DevicesRmaPostRequest{value: val, isSet: true}
}

func (v NullableV1DevicesRmaPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesRmaPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


