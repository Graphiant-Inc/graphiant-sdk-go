/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesDeviceIdConfigPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesDeviceIdConfigPutRequest{}

// V1DevicesDeviceIdConfigPutRequest struct for V1DevicesDeviceIdConfigPutRequest
type V1DevicesDeviceIdConfigPutRequest struct {
	ConfigurationMetadata *V1VersionPostRequestConfigurationMetadata `json:"configurationMetadata,omitempty"`
	Core *V1DevicesDeviceIdConfigPutRequestCore `json:"core,omitempty"`
	Description *string `json:"description,omitempty"`
	Edge *V1DevicesDeviceIdConfigPutRequestEdge `json:"edge,omitempty"`
	LocalWebServerPassword *string `json:"localWebServerPassword,omitempty"`
	Replace *bool `json:"replace,omitempty"`
}

// NewV1DevicesDeviceIdConfigPutRequest instantiates a new V1DevicesDeviceIdConfigPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesDeviceIdConfigPutRequest() *V1DevicesDeviceIdConfigPutRequest {
	this := V1DevicesDeviceIdConfigPutRequest{}
	return &this
}

// NewV1DevicesDeviceIdConfigPutRequestWithDefaults instantiates a new V1DevicesDeviceIdConfigPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesDeviceIdConfigPutRequestWithDefaults() *V1DevicesDeviceIdConfigPutRequest {
	this := V1DevicesDeviceIdConfigPutRequest{}
	return &this
}

// GetConfigurationMetadata returns the ConfigurationMetadata field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequest) GetConfigurationMetadata() V1VersionPostRequestConfigurationMetadata {
	if o == nil || IsNil(o.ConfigurationMetadata) {
		var ret V1VersionPostRequestConfigurationMetadata
		return ret
	}
	return *o.ConfigurationMetadata
}

// GetConfigurationMetadataOk returns a tuple with the ConfigurationMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) GetConfigurationMetadataOk() (*V1VersionPostRequestConfigurationMetadata, bool) {
	if o == nil || IsNil(o.ConfigurationMetadata) {
		return nil, false
	}
	return o.ConfigurationMetadata, true
}

// HasConfigurationMetadata returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) HasConfigurationMetadata() bool {
	if o != nil && !IsNil(o.ConfigurationMetadata) {
		return true
	}

	return false
}

// SetConfigurationMetadata gets a reference to the given V1VersionPostRequestConfigurationMetadata and assigns it to the ConfigurationMetadata field.
func (o *V1DevicesDeviceIdConfigPutRequest) SetConfigurationMetadata(v V1VersionPostRequestConfigurationMetadata) {
	o.ConfigurationMetadata = &v
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequest) GetCore() V1DevicesDeviceIdConfigPutRequestCore {
	if o == nil || IsNil(o.Core) {
		var ret V1DevicesDeviceIdConfigPutRequestCore
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) GetCoreOk() (*V1DevicesDeviceIdConfigPutRequestCore, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given V1DevicesDeviceIdConfigPutRequestCore and assigns it to the Core field.
func (o *V1DevicesDeviceIdConfigPutRequest) SetCore(v V1DevicesDeviceIdConfigPutRequestCore) {
	o.Core = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1DevicesDeviceIdConfigPutRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEdge returns the Edge field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequest) GetEdge() V1DevicesDeviceIdConfigPutRequestEdge {
	if o == nil || IsNil(o.Edge) {
		var ret V1DevicesDeviceIdConfigPutRequestEdge
		return ret
	}
	return *o.Edge
}

// GetEdgeOk returns a tuple with the Edge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) GetEdgeOk() (*V1DevicesDeviceIdConfigPutRequestEdge, bool) {
	if o == nil || IsNil(o.Edge) {
		return nil, false
	}
	return o.Edge, true
}

// HasEdge returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) HasEdge() bool {
	if o != nil && !IsNil(o.Edge) {
		return true
	}

	return false
}

// SetEdge gets a reference to the given V1DevicesDeviceIdConfigPutRequestEdge and assigns it to the Edge field.
func (o *V1DevicesDeviceIdConfigPutRequest) SetEdge(v V1DevicesDeviceIdConfigPutRequestEdge) {
	o.Edge = &v
}

// GetLocalWebServerPassword returns the LocalWebServerPassword field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequest) GetLocalWebServerPassword() string {
	if o == nil || IsNil(o.LocalWebServerPassword) {
		var ret string
		return ret
	}
	return *o.LocalWebServerPassword
}

// GetLocalWebServerPasswordOk returns a tuple with the LocalWebServerPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) GetLocalWebServerPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LocalWebServerPassword) {
		return nil, false
	}
	return o.LocalWebServerPassword, true
}

// HasLocalWebServerPassword returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) HasLocalWebServerPassword() bool {
	if o != nil && !IsNil(o.LocalWebServerPassword) {
		return true
	}

	return false
}

// SetLocalWebServerPassword gets a reference to the given string and assigns it to the LocalWebServerPassword field.
func (o *V1DevicesDeviceIdConfigPutRequest) SetLocalWebServerPassword(v string) {
	o.LocalWebServerPassword = &v
}

// GetReplace returns the Replace field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequest) GetReplace() bool {
	if o == nil || IsNil(o.Replace) {
		var ret bool
		return ret
	}
	return *o.Replace
}

// GetReplaceOk returns a tuple with the Replace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) GetReplaceOk() (*bool, bool) {
	if o == nil || IsNil(o.Replace) {
		return nil, false
	}
	return o.Replace, true
}

// HasReplace returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequest) HasReplace() bool {
	if o != nil && !IsNil(o.Replace) {
		return true
	}

	return false
}

// SetReplace gets a reference to the given bool and assigns it to the Replace field.
func (o *V1DevicesDeviceIdConfigPutRequest) SetReplace(v bool) {
	o.Replace = &v
}

func (o V1DevicesDeviceIdConfigPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesDeviceIdConfigPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationMetadata) {
		toSerialize["configurationMetadata"] = o.ConfigurationMetadata
	}
	if !IsNil(o.Core) {
		toSerialize["core"] = o.Core
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Edge) {
		toSerialize["edge"] = o.Edge
	}
	if !IsNil(o.LocalWebServerPassword) {
		toSerialize["localWebServerPassword"] = o.LocalWebServerPassword
	}
	if !IsNil(o.Replace) {
		toSerialize["replace"] = o.Replace
	}
	return toSerialize, nil
}

type NullableV1DevicesDeviceIdConfigPutRequest struct {
	value *V1DevicesDeviceIdConfigPutRequest
	isSet bool
}

func (v NullableV1DevicesDeviceIdConfigPutRequest) Get() *V1DevicesDeviceIdConfigPutRequest {
	return v.value
}

func (v *NullableV1DevicesDeviceIdConfigPutRequest) Set(val *V1DevicesDeviceIdConfigPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesDeviceIdConfigPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesDeviceIdConfigPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesDeviceIdConfigPutRequest(val *V1DevicesDeviceIdConfigPutRequest) *NullableV1DevicesDeviceIdConfigPutRequest {
	return &NullableV1DevicesDeviceIdConfigPutRequest{value: val, isSet: true}
}

func (v NullableV1DevicesDeviceIdConfigPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesDeviceIdConfigPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


