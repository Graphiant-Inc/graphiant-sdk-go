/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner{}

// V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner struct for V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner
type V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner struct {
	DelayValue *float64 `json:"delayValue,omitempty"`
	JitterValue *float64 `json:"jitterValue,omitempty"`
	LossValue *float64 `json:"lossValue,omitempty"`
	Status *string `json:"status,omitempty"`
	Time *V1AlarmHistoryGet200ResponseHistoryInnerTime `json:"time,omitempty"`
	Value *float64 `json:"value,omitempty"`
}

// NewV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner instantiates a new V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner() *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner {
	this := V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner{}
	return &this
}

// NewV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInnerWithDefaults instantiates a new V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInnerWithDefaults() *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner {
	this := V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner{}
	return &this
}

// GetDelayValue returns the DelayValue field value if set, zero value otherwise.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetDelayValue() float64 {
	if o == nil || IsNil(o.DelayValue) {
		var ret float64
		return ret
	}
	return *o.DelayValue
}

// GetDelayValueOk returns a tuple with the DelayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetDelayValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DelayValue) {
		return nil, false
	}
	return o.DelayValue, true
}

// HasDelayValue returns a boolean if a field has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) HasDelayValue() bool {
	if o != nil && !IsNil(o.DelayValue) {
		return true
	}

	return false
}

// SetDelayValue gets a reference to the given float64 and assigns it to the DelayValue field.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) SetDelayValue(v float64) {
	o.DelayValue = &v
}

// GetJitterValue returns the JitterValue field value if set, zero value otherwise.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetJitterValue() float64 {
	if o == nil || IsNil(o.JitterValue) {
		var ret float64
		return ret
	}
	return *o.JitterValue
}

// GetJitterValueOk returns a tuple with the JitterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetJitterValueOk() (*float64, bool) {
	if o == nil || IsNil(o.JitterValue) {
		return nil, false
	}
	return o.JitterValue, true
}

// HasJitterValue returns a boolean if a field has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) HasJitterValue() bool {
	if o != nil && !IsNil(o.JitterValue) {
		return true
	}

	return false
}

// SetJitterValue gets a reference to the given float64 and assigns it to the JitterValue field.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) SetJitterValue(v float64) {
	o.JitterValue = &v
}

// GetLossValue returns the LossValue field value if set, zero value otherwise.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetLossValue() float64 {
	if o == nil || IsNil(o.LossValue) {
		var ret float64
		return ret
	}
	return *o.LossValue
}

// GetLossValueOk returns a tuple with the LossValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetLossValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LossValue) {
		return nil, false
	}
	return o.LossValue, true
}

// HasLossValue returns a boolean if a field has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) HasLossValue() bool {
	if o != nil && !IsNil(o.LossValue) {
		return true
	}

	return false
}

// SetLossValue gets a reference to the given float64 and assigns it to the LossValue field.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) SetLossValue(v float64) {
	o.LossValue = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) SetStatus(v string) {
	o.Status = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetTime() V1AlarmHistoryGet200ResponseHistoryInnerTime {
	if o == nil || IsNil(o.Time) {
		var ret V1AlarmHistoryGet200ResponseHistoryInnerTime
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetTimeOk() (*V1AlarmHistoryGet200ResponseHistoryInnerTime, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given V1AlarmHistoryGet200ResponseHistoryInnerTime and assigns it to the Time field.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) SetTime(v V1AlarmHistoryGet200ResponseHistoryInnerTime) {
	o.Time = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) SetValue(v float64) {
	o.Value = &v
}

func (o V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DelayValue) {
		toSerialize["delayValue"] = o.DelayValue
	}
	if !IsNil(o.JitterValue) {
		toSerialize["jitterValue"] = o.JitterValue
	}
	if !IsNil(o.LossValue) {
		toSerialize["lossValue"] = o.LossValue
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner struct {
	value *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner
	isSet bool
}

func (v NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) Get() *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner {
	return v.value
}

func (v *NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) Set(val *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner(val *V1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) *NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner {
	return &NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner{value: val, isSet: true}
}

func (v NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BackboneHealthDeviceDeviceIdPost200ResponseDataPlaneSessionSlasInnerValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


