/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DiagnosticPacketcaptureStartPostRequestFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DiagnosticPacketcaptureStartPostRequestFilter{}

// V1DiagnosticPacketcaptureStartPostRequestFilter struct for V1DiagnosticPacketcaptureStartPostRequestFilter
type V1DiagnosticPacketcaptureStartPostRequestFilter struct {
	Destination *V1DiagnosticPacketcaptureStartPostRequestFilterDestination `json:"destination,omitempty"`
	Dscp *int32 `json:"dscp,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	Source *V1DiagnosticPacketcaptureStartPostRequestFilterDestination `json:"source,omitempty"`
}

// NewV1DiagnosticPacketcaptureStartPostRequestFilter instantiates a new V1DiagnosticPacketcaptureStartPostRequestFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DiagnosticPacketcaptureStartPostRequestFilter() *V1DiagnosticPacketcaptureStartPostRequestFilter {
	this := V1DiagnosticPacketcaptureStartPostRequestFilter{}
	return &this
}

// NewV1DiagnosticPacketcaptureStartPostRequestFilterWithDefaults instantiates a new V1DiagnosticPacketcaptureStartPostRequestFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DiagnosticPacketcaptureStartPostRequestFilterWithDefaults() *V1DiagnosticPacketcaptureStartPostRequestFilter {
	this := V1DiagnosticPacketcaptureStartPostRequestFilter{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetDestination() V1DiagnosticPacketcaptureStartPostRequestFilterDestination {
	if o == nil || IsNil(o.Destination) {
		var ret V1DiagnosticPacketcaptureStartPostRequestFilterDestination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetDestinationOk() (*V1DiagnosticPacketcaptureStartPostRequestFilterDestination, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given V1DiagnosticPacketcaptureStartPostRequestFilterDestination and assigns it to the Destination field.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) SetDestination(v V1DiagnosticPacketcaptureStartPostRequestFilterDestination) {
	o.Destination = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetDscp() int32 {
	if o == nil || IsNil(o.Dscp) {
		var ret int32
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetDscpOk() (*int32, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int32 and assigns it to the Dscp field.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) SetDscp(v int32) {
	o.Dscp = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetSource() V1DiagnosticPacketcaptureStartPostRequestFilterDestination {
	if o == nil || IsNil(o.Source) {
		var ret V1DiagnosticPacketcaptureStartPostRequestFilterDestination
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) GetSourceOk() (*V1DiagnosticPacketcaptureStartPostRequestFilterDestination, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given V1DiagnosticPacketcaptureStartPostRequestFilterDestination and assigns it to the Source field.
func (o *V1DiagnosticPacketcaptureStartPostRequestFilter) SetSource(v V1DiagnosticPacketcaptureStartPostRequestFilterDestination) {
	o.Source = &v
}

func (o V1DiagnosticPacketcaptureStartPostRequestFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DiagnosticPacketcaptureStartPostRequestFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableV1DiagnosticPacketcaptureStartPostRequestFilter struct {
	value *V1DiagnosticPacketcaptureStartPostRequestFilter
	isSet bool
}

func (v NullableV1DiagnosticPacketcaptureStartPostRequestFilter) Get() *V1DiagnosticPacketcaptureStartPostRequestFilter {
	return v.value
}

func (v *NullableV1DiagnosticPacketcaptureStartPostRequestFilter) Set(val *V1DiagnosticPacketcaptureStartPostRequestFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DiagnosticPacketcaptureStartPostRequestFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DiagnosticPacketcaptureStartPostRequestFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DiagnosticPacketcaptureStartPostRequestFilter(val *V1DiagnosticPacketcaptureStartPostRequestFilter) *NullableV1DiagnosticPacketcaptureStartPostRequestFilter {
	return &NullableV1DiagnosticPacketcaptureStartPostRequestFilter{value: val, isSet: true}
}

func (v NullableV1DiagnosticPacketcaptureStartPostRequestFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DiagnosticPacketcaptureStartPostRequestFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


