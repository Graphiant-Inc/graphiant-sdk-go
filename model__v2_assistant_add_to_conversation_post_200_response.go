/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2AssistantAddToConversationPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2AssistantAddToConversationPost200Response{}

// V2AssistantAddToConversationPost200Response struct for V2AssistantAddToConversationPost200Response
type V2AssistantAddToConversationPost200Response struct {
	ConversationId *string `json:"conversationId,omitempty"`
	DataframeDictionary []V2AssistantAddToConversationPost200ResponseDataframeDictionaryInner `json:"dataframeDictionary,omitempty"`
	OriginalQuestion *V2AssistantAddToConversationPostRequestQuestion `json:"originalQuestion,omitempty"`
	ResponseId *string `json:"responseId,omitempty"`
	ResponseLanguage *string `json:"responseLanguage,omitempty"`
	ResponseText *string `json:"responseText,omitempty"`
	ResponseTimestamp *int64 `json:"responseTimestamp,omitempty"`
	ResponseType *string `json:"responseType,omitempty"`
}

// NewV2AssistantAddToConversationPost200Response instantiates a new V2AssistantAddToConversationPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2AssistantAddToConversationPost200Response() *V2AssistantAddToConversationPost200Response {
	this := V2AssistantAddToConversationPost200Response{}
	return &this
}

// NewV2AssistantAddToConversationPost200ResponseWithDefaults instantiates a new V2AssistantAddToConversationPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2AssistantAddToConversationPost200ResponseWithDefaults() *V2AssistantAddToConversationPost200Response {
	this := V2AssistantAddToConversationPost200Response{}
	return &this
}

// GetConversationId returns the ConversationId field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetConversationId() string {
	if o == nil || IsNil(o.ConversationId) {
		var ret string
		return ret
	}
	return *o.ConversationId
}

// GetConversationIdOk returns a tuple with the ConversationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetConversationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConversationId) {
		return nil, false
	}
	return o.ConversationId, true
}

// HasConversationId returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasConversationId() bool {
	if o != nil && !IsNil(o.ConversationId) {
		return true
	}

	return false
}

// SetConversationId gets a reference to the given string and assigns it to the ConversationId field.
func (o *V2AssistantAddToConversationPost200Response) SetConversationId(v string) {
	o.ConversationId = &v
}

// GetDataframeDictionary returns the DataframeDictionary field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetDataframeDictionary() []V2AssistantAddToConversationPost200ResponseDataframeDictionaryInner {
	if o == nil || IsNil(o.DataframeDictionary) {
		var ret []V2AssistantAddToConversationPost200ResponseDataframeDictionaryInner
		return ret
	}
	return o.DataframeDictionary
}

// GetDataframeDictionaryOk returns a tuple with the DataframeDictionary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetDataframeDictionaryOk() ([]V2AssistantAddToConversationPost200ResponseDataframeDictionaryInner, bool) {
	if o == nil || IsNil(o.DataframeDictionary) {
		return nil, false
	}
	return o.DataframeDictionary, true
}

// HasDataframeDictionary returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasDataframeDictionary() bool {
	if o != nil && !IsNil(o.DataframeDictionary) {
		return true
	}

	return false
}

// SetDataframeDictionary gets a reference to the given []V2AssistantAddToConversationPost200ResponseDataframeDictionaryInner and assigns it to the DataframeDictionary field.
func (o *V2AssistantAddToConversationPost200Response) SetDataframeDictionary(v []V2AssistantAddToConversationPost200ResponseDataframeDictionaryInner) {
	o.DataframeDictionary = v
}

// GetOriginalQuestion returns the OriginalQuestion field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetOriginalQuestion() V2AssistantAddToConversationPostRequestQuestion {
	if o == nil || IsNil(o.OriginalQuestion) {
		var ret V2AssistantAddToConversationPostRequestQuestion
		return ret
	}
	return *o.OriginalQuestion
}

// GetOriginalQuestionOk returns a tuple with the OriginalQuestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetOriginalQuestionOk() (*V2AssistantAddToConversationPostRequestQuestion, bool) {
	if o == nil || IsNil(o.OriginalQuestion) {
		return nil, false
	}
	return o.OriginalQuestion, true
}

// HasOriginalQuestion returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasOriginalQuestion() bool {
	if o != nil && !IsNil(o.OriginalQuestion) {
		return true
	}

	return false
}

// SetOriginalQuestion gets a reference to the given V2AssistantAddToConversationPostRequestQuestion and assigns it to the OriginalQuestion field.
func (o *V2AssistantAddToConversationPost200Response) SetOriginalQuestion(v V2AssistantAddToConversationPostRequestQuestion) {
	o.OriginalQuestion = &v
}

// GetResponseId returns the ResponseId field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetResponseId() string {
	if o == nil || IsNil(o.ResponseId) {
		var ret string
		return ret
	}
	return *o.ResponseId
}

// GetResponseIdOk returns a tuple with the ResponseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetResponseIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseId) {
		return nil, false
	}
	return o.ResponseId, true
}

// HasResponseId returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasResponseId() bool {
	if o != nil && !IsNil(o.ResponseId) {
		return true
	}

	return false
}

// SetResponseId gets a reference to the given string and assigns it to the ResponseId field.
func (o *V2AssistantAddToConversationPost200Response) SetResponseId(v string) {
	o.ResponseId = &v
}

// GetResponseLanguage returns the ResponseLanguage field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetResponseLanguage() string {
	if o == nil || IsNil(o.ResponseLanguage) {
		var ret string
		return ret
	}
	return *o.ResponseLanguage
}

// GetResponseLanguageOk returns a tuple with the ResponseLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetResponseLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseLanguage) {
		return nil, false
	}
	return o.ResponseLanguage, true
}

// HasResponseLanguage returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasResponseLanguage() bool {
	if o != nil && !IsNil(o.ResponseLanguage) {
		return true
	}

	return false
}

// SetResponseLanguage gets a reference to the given string and assigns it to the ResponseLanguage field.
func (o *V2AssistantAddToConversationPost200Response) SetResponseLanguage(v string) {
	o.ResponseLanguage = &v
}

// GetResponseText returns the ResponseText field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetResponseText() string {
	if o == nil || IsNil(o.ResponseText) {
		var ret string
		return ret
	}
	return *o.ResponseText
}

// GetResponseTextOk returns a tuple with the ResponseText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetResponseTextOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseText) {
		return nil, false
	}
	return o.ResponseText, true
}

// HasResponseText returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasResponseText() bool {
	if o != nil && !IsNil(o.ResponseText) {
		return true
	}

	return false
}

// SetResponseText gets a reference to the given string and assigns it to the ResponseText field.
func (o *V2AssistantAddToConversationPost200Response) SetResponseText(v string) {
	o.ResponseText = &v
}

// GetResponseTimestamp returns the ResponseTimestamp field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetResponseTimestamp() int64 {
	if o == nil || IsNil(o.ResponseTimestamp) {
		var ret int64
		return ret
	}
	return *o.ResponseTimestamp
}

// GetResponseTimestampOk returns a tuple with the ResponseTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetResponseTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.ResponseTimestamp) {
		return nil, false
	}
	return o.ResponseTimestamp, true
}

// HasResponseTimestamp returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasResponseTimestamp() bool {
	if o != nil && !IsNil(o.ResponseTimestamp) {
		return true
	}

	return false
}

// SetResponseTimestamp gets a reference to the given int64 and assigns it to the ResponseTimestamp field.
func (o *V2AssistantAddToConversationPost200Response) SetResponseTimestamp(v int64) {
	o.ResponseTimestamp = &v
}

// GetResponseType returns the ResponseType field value if set, zero value otherwise.
func (o *V2AssistantAddToConversationPost200Response) GetResponseType() string {
	if o == nil || IsNil(o.ResponseType) {
		var ret string
		return ret
	}
	return *o.ResponseType
}

// GetResponseTypeOk returns a tuple with the ResponseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssistantAddToConversationPost200Response) GetResponseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseType) {
		return nil, false
	}
	return o.ResponseType, true
}

// HasResponseType returns a boolean if a field has been set.
func (o *V2AssistantAddToConversationPost200Response) HasResponseType() bool {
	if o != nil && !IsNil(o.ResponseType) {
		return true
	}

	return false
}

// SetResponseType gets a reference to the given string and assigns it to the ResponseType field.
func (o *V2AssistantAddToConversationPost200Response) SetResponseType(v string) {
	o.ResponseType = &v
}

func (o V2AssistantAddToConversationPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2AssistantAddToConversationPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConversationId) {
		toSerialize["conversationId"] = o.ConversationId
	}
	if !IsNil(o.DataframeDictionary) {
		toSerialize["dataframeDictionary"] = o.DataframeDictionary
	}
	if !IsNil(o.OriginalQuestion) {
		toSerialize["originalQuestion"] = o.OriginalQuestion
	}
	if !IsNil(o.ResponseId) {
		toSerialize["responseId"] = o.ResponseId
	}
	if !IsNil(o.ResponseLanguage) {
		toSerialize["responseLanguage"] = o.ResponseLanguage
	}
	if !IsNil(o.ResponseText) {
		toSerialize["responseText"] = o.ResponseText
	}
	if !IsNil(o.ResponseTimestamp) {
		toSerialize["responseTimestamp"] = o.ResponseTimestamp
	}
	if !IsNil(o.ResponseType) {
		toSerialize["responseType"] = o.ResponseType
	}
	return toSerialize, nil
}

type NullableV2AssistantAddToConversationPost200Response struct {
	value *V2AssistantAddToConversationPost200Response
	isSet bool
}

func (v NullableV2AssistantAddToConversationPost200Response) Get() *V2AssistantAddToConversationPost200Response {
	return v.value
}

func (v *NullableV2AssistantAddToConversationPost200Response) Set(val *V2AssistantAddToConversationPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AssistantAddToConversationPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AssistantAddToConversationPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AssistantAddToConversationPost200Response(val *V2AssistantAddToConversationPost200Response) *NullableV2AssistantAddToConversationPost200Response {
	return &NullableV2AssistantAddToConversationPost200Response{value: val, isSet: true}
}

func (v NullableV2AssistantAddToConversationPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AssistantAddToConversationPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


