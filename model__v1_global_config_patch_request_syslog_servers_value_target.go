/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1GlobalConfigPatchRequestSyslogServersValueTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GlobalConfigPatchRequestSyslogServersValueTarget{}

// V1GlobalConfigPatchRequestSyslogServersValueTarget struct for V1GlobalConfigPatchRequestSyslogServersValueTarget
type V1GlobalConfigPatchRequestSyslogServersValueTarget struct {
	Enabled *bool `json:"enabled,omitempty"`
	GlobalId *int64 `json:"globalId,omitempty"`
	Host *string `json:"host,omitempty"`
	InterfaceName *string `json:"interfaceName,omitempty"`
	IsGlobalSync *bool `json:"isGlobalSync,omitempty"`
	Name *string `json:"name,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Transport *string `json:"transport,omitempty"`
	VrfId *int64 `json:"vrfId,omitempty"`
}

// NewV1GlobalConfigPatchRequestSyslogServersValueTarget instantiates a new V1GlobalConfigPatchRequestSyslogServersValueTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GlobalConfigPatchRequestSyslogServersValueTarget() *V1GlobalConfigPatchRequestSyslogServersValueTarget {
	this := V1GlobalConfigPatchRequestSyslogServersValueTarget{}
	return &this
}

// NewV1GlobalConfigPatchRequestSyslogServersValueTargetWithDefaults instantiates a new V1GlobalConfigPatchRequestSyslogServersValueTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GlobalConfigPatchRequestSyslogServersValueTargetWithDefaults() *V1GlobalConfigPatchRequestSyslogServersValueTarget {
	this := V1GlobalConfigPatchRequestSyslogServersValueTarget{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGlobalId returns the GlobalId field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetGlobalId() int64 {
	if o == nil || IsNil(o.GlobalId) {
		var ret int64
		return ret
	}
	return *o.GlobalId
}

// GetGlobalIdOk returns a tuple with the GlobalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetGlobalIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GlobalId) {
		return nil, false
	}
	return o.GlobalId, true
}

// HasGlobalId returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasGlobalId() bool {
	if o != nil && !IsNil(o.GlobalId) {
		return true
	}

	return false
}

// SetGlobalId gets a reference to the given int64 and assigns it to the GlobalId field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetGlobalId(v int64) {
	o.GlobalId = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetHost(v string) {
	o.Host = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetIsGlobalSync returns the IsGlobalSync field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetIsGlobalSync() bool {
	if o == nil || IsNil(o.IsGlobalSync) {
		var ret bool
		return ret
	}
	return *o.IsGlobalSync
}

// GetIsGlobalSyncOk returns a tuple with the IsGlobalSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetIsGlobalSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGlobalSync) {
		return nil, false
	}
	return o.IsGlobalSync, true
}

// HasIsGlobalSync returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasIsGlobalSync() bool {
	if o != nil && !IsNil(o.IsGlobalSync) {
		return true
	}

	return false
}

// SetIsGlobalSync gets a reference to the given bool and assigns it to the IsGlobalSync field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetIsGlobalSync(v bool) {
	o.IsGlobalSync = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetPort(v int32) {
	o.Port = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetSeverity(v string) {
	o.Severity = &v
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetTransport() string {
	if o == nil || IsNil(o.Transport) {
		var ret string
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetTransportOk() (*string, bool) {
	if o == nil || IsNil(o.Transport) {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasTransport() bool {
	if o != nil && !IsNil(o.Transport) {
		return true
	}

	return false
}

// SetTransport gets a reference to the given string and assigns it to the Transport field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetTransport(v string) {
	o.Transport = &v
}

// GetVrfId returns the VrfId field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetVrfId() int64 {
	if o == nil || IsNil(o.VrfId) {
		var ret int64
		return ret
	}
	return *o.VrfId
}

// GetVrfIdOk returns a tuple with the VrfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) GetVrfIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VrfId) {
		return nil, false
	}
	return o.VrfId, true
}

// HasVrfId returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) HasVrfId() bool {
	if o != nil && !IsNil(o.VrfId) {
		return true
	}

	return false
}

// SetVrfId gets a reference to the given int64 and assigns it to the VrfId field.
func (o *V1GlobalConfigPatchRequestSyslogServersValueTarget) SetVrfId(v int64) {
	o.VrfId = &v
}

func (o V1GlobalConfigPatchRequestSyslogServersValueTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GlobalConfigPatchRequestSyslogServersValueTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.GlobalId) {
		toSerialize["globalId"] = o.GlobalId
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.InterfaceName) {
		toSerialize["interfaceName"] = o.InterfaceName
	}
	if !IsNil(o.IsGlobalSync) {
		toSerialize["isGlobalSync"] = o.IsGlobalSync
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Transport) {
		toSerialize["transport"] = o.Transport
	}
	if !IsNil(o.VrfId) {
		toSerialize["vrfId"] = o.VrfId
	}
	return toSerialize, nil
}

type NullableV1GlobalConfigPatchRequestSyslogServersValueTarget struct {
	value *V1GlobalConfigPatchRequestSyslogServersValueTarget
	isSet bool
}

func (v NullableV1GlobalConfigPatchRequestSyslogServersValueTarget) Get() *V1GlobalConfigPatchRequestSyslogServersValueTarget {
	return v.value
}

func (v *NullableV1GlobalConfigPatchRequestSyslogServersValueTarget) Set(val *V1GlobalConfigPatchRequestSyslogServersValueTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GlobalConfigPatchRequestSyslogServersValueTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GlobalConfigPatchRequestSyslogServersValueTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GlobalConfigPatchRequestSyslogServersValueTarget(val *V1GlobalConfigPatchRequestSyslogServersValueTarget) *NullableV1GlobalConfigPatchRequestSyslogServersValueTarget {
	return &NullableV1GlobalConfigPatchRequestSyslogServersValueTarget{value: val, isSet: true}
}

func (v NullableV1GlobalConfigPatchRequestSyslogServersValueTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GlobalConfigPatchRequestSyslogServersValueTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


