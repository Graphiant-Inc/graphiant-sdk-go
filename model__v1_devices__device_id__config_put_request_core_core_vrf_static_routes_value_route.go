/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute{}

// V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute struct for V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute
type V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute struct {
	AdminDistance *int32 `json:"adminDistance,omitempty"`
	AdministrativeDistance *V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance `json:"administrativeDistance,omitempty"`
	Description *string `json:"description,omitempty"`
	DestinationPrefix *string `json:"destinationPrefix,omitempty"`
	IpVersion *int32 `json:"ipVersion,omitempty"`
	NextHop *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop `json:"nextHop,omitempty"`
	NextHops []V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop `json:"nextHops,omitempty"`
}

// NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute instantiates a new V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute {
	this := V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute{}
	return &this
}

// NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteWithDefaults instantiates a new V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteWithDefaults() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute {
	this := V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute{}
	return &this
}

// GetAdminDistance returns the AdminDistance field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetAdminDistance() int32 {
	if o == nil || IsNil(o.AdminDistance) {
		var ret int32
		return ret
	}
	return *o.AdminDistance
}

// GetAdminDistanceOk returns a tuple with the AdminDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetAdminDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.AdminDistance) {
		return nil, false
	}
	return o.AdminDistance, true
}

// HasAdminDistance returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasAdminDistance() bool {
	if o != nil && !IsNil(o.AdminDistance) {
		return true
	}

	return false
}

// SetAdminDistance gets a reference to the given int32 and assigns it to the AdminDistance field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetAdminDistance(v int32) {
	o.AdminDistance = &v
}

// GetAdministrativeDistance returns the AdministrativeDistance field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetAdministrativeDistance() V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance {
	if o == nil || IsNil(o.AdministrativeDistance) {
		var ret V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance
		return ret
	}
	return *o.AdministrativeDistance
}

// GetAdministrativeDistanceOk returns a tuple with the AdministrativeDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetAdministrativeDistanceOk() (*V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance, bool) {
	if o == nil || IsNil(o.AdministrativeDistance) {
		return nil, false
	}
	return o.AdministrativeDistance, true
}

// HasAdministrativeDistance returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasAdministrativeDistance() bool {
	if o != nil && !IsNil(o.AdministrativeDistance) {
		return true
	}

	return false
}

// SetAdministrativeDistance gets a reference to the given V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance and assigns it to the AdministrativeDistance field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetAdministrativeDistance(v V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance) {
	o.AdministrativeDistance = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetDescription(v string) {
	o.Description = &v
}

// GetDestinationPrefix returns the DestinationPrefix field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetDestinationPrefix() string {
	if o == nil || IsNil(o.DestinationPrefix) {
		var ret string
		return ret
	}
	return *o.DestinationPrefix
}

// GetDestinationPrefixOk returns a tuple with the DestinationPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetDestinationPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationPrefix) {
		return nil, false
	}
	return o.DestinationPrefix, true
}

// HasDestinationPrefix returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasDestinationPrefix() bool {
	if o != nil && !IsNil(o.DestinationPrefix) {
		return true
	}

	return false
}

// SetDestinationPrefix gets a reference to the given string and assigns it to the DestinationPrefix field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetDestinationPrefix(v string) {
	o.DestinationPrefix = &v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetIpVersion() int32 {
	if o == nil || IsNil(o.IpVersion) {
		var ret int32
		return ret
	}
	return *o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetIpVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.IpVersion) {
		return nil, false
	}
	return o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasIpVersion() bool {
	if o != nil && !IsNil(o.IpVersion) {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given int32 and assigns it to the IpVersion field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetIpVersion(v int32) {
	o.IpVersion = &v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetNextHop() V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop {
	if o == nil || IsNil(o.NextHop) {
		var ret V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetNextHopOk() (*V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop, bool) {
	if o == nil || IsNil(o.NextHop) {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasNextHop() bool {
	if o != nil && !IsNil(o.NextHop) {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop and assigns it to the NextHop field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetNextHop(v V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop) {
	o.NextHop = &v
}

// GetNextHops returns the NextHops field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetNextHops() []V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop {
	if o == nil || IsNil(o.NextHops) {
		var ret []V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop
		return ret
	}
	return o.NextHops
}

// GetNextHopsOk returns a tuple with the NextHops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) GetNextHopsOk() ([]V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop, bool) {
	if o == nil || IsNil(o.NextHops) {
		return nil, false
	}
	return o.NextHops, true
}

// HasNextHops returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) HasNextHops() bool {
	if o != nil && !IsNil(o.NextHops) {
		return true
	}

	return false
}

// SetNextHops gets a reference to the given []V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop and assigns it to the NextHops field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) SetNextHops(v []V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRouteNextHop) {
	o.NextHops = v
}

func (o V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminDistance) {
		toSerialize["adminDistance"] = o.AdminDistance
	}
	if !IsNil(o.AdministrativeDistance) {
		toSerialize["administrativeDistance"] = o.AdministrativeDistance
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DestinationPrefix) {
		toSerialize["destinationPrefix"] = o.DestinationPrefix
	}
	if !IsNil(o.IpVersion) {
		toSerialize["ipVersion"] = o.IpVersion
	}
	if !IsNil(o.NextHop) {
		toSerialize["nextHop"] = o.NextHop
	}
	if !IsNil(o.NextHops) {
		toSerialize["nextHops"] = o.NextHops
	}
	return toSerialize, nil
}

type NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute struct {
	value *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute
	isSet bool
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) Get() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute {
	return v.value
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) Set(val *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute(val *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute {
	return &NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute{value: val, isSet: true}
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValueRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


