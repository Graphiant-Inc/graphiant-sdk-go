/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount{}

// V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount struct for V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount
type V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount struct {
	Ipv4 *int64 `json:"ipv4,omitempty"`
	Ipv6 *int64 `json:"ipv6,omitempty"`
}

// NewV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount instantiates a new V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount() *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount {
	this := V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount{}
	return &this
}

// NewV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCountWithDefaults instantiates a new V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCountWithDefaults() *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount {
	this := V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount{}
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) GetIpv4() int64 {
	if o == nil || IsNil(o.Ipv4) {
		var ret int64
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) GetIpv4Ok() (*int64, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given int64 and assigns it to the Ipv4 field.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) SetIpv4(v int64) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) GetIpv6() int64 {
	if o == nil || IsNil(o.Ipv6) {
		var ret int64
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) GetIpv6Ok() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given int64 and assigns it to the Ipv6 field.
func (o *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) SetIpv6(v int64) {
	o.Ipv6 = &v
}

func (o V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	return toSerialize, nil
}

type NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount struct {
	value *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount
	isSet bool
}

func (v NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) Get() *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount {
	return v.value
}

func (v *NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) Set(val *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount(val *V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) *NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount {
	return &NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount{value: val, isSet: true}
}

func (v NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


