/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1AuthGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AuthGet200Response{}

// V1AuthGet200Response struct for V1AuthGet200Response
type V1AuthGet200Response struct {
	Cert *string `json:"cert,omitempty"`
	EntryPoint *string `json:"entryPoint,omitempty"`
	IamType *string `json:"iamType,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
}

// NewV1AuthGet200Response instantiates a new V1AuthGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AuthGet200Response() *V1AuthGet200Response {
	this := V1AuthGet200Response{}
	return &this
}

// NewV1AuthGet200ResponseWithDefaults instantiates a new V1AuthGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AuthGet200ResponseWithDefaults() *V1AuthGet200Response {
	this := V1AuthGet200Response{}
	return &this
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *V1AuthGet200Response) GetCert() string {
	if o == nil || IsNil(o.Cert) {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthGet200Response) GetCertOk() (*string, bool) {
	if o == nil || IsNil(o.Cert) {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *V1AuthGet200Response) HasCert() bool {
	if o != nil && !IsNil(o.Cert) {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *V1AuthGet200Response) SetCert(v string) {
	o.Cert = &v
}

// GetEntryPoint returns the EntryPoint field value if set, zero value otherwise.
func (o *V1AuthGet200Response) GetEntryPoint() string {
	if o == nil || IsNil(o.EntryPoint) {
		var ret string
		return ret
	}
	return *o.EntryPoint
}

// GetEntryPointOk returns a tuple with the EntryPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthGet200Response) GetEntryPointOk() (*string, bool) {
	if o == nil || IsNil(o.EntryPoint) {
		return nil, false
	}
	return o.EntryPoint, true
}

// HasEntryPoint returns a boolean if a field has been set.
func (o *V1AuthGet200Response) HasEntryPoint() bool {
	if o != nil && !IsNil(o.EntryPoint) {
		return true
	}

	return false
}

// SetEntryPoint gets a reference to the given string and assigns it to the EntryPoint field.
func (o *V1AuthGet200Response) SetEntryPoint(v string) {
	o.EntryPoint = &v
}

// GetIamType returns the IamType field value if set, zero value otherwise.
func (o *V1AuthGet200Response) GetIamType() string {
	if o == nil || IsNil(o.IamType) {
		var ret string
		return ret
	}
	return *o.IamType
}

// GetIamTypeOk returns a tuple with the IamType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthGet200Response) GetIamTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IamType) {
		return nil, false
	}
	return o.IamType, true
}

// HasIamType returns a boolean if a field has been set.
func (o *V1AuthGet200Response) HasIamType() bool {
	if o != nil && !IsNil(o.IamType) {
		return true
	}

	return false
}

// SetIamType gets a reference to the given string and assigns it to the IamType field.
func (o *V1AuthGet200Response) SetIamType(v string) {
	o.IamType = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *V1AuthGet200Response) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthGet200Response) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *V1AuthGet200Response) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *V1AuthGet200Response) SetIssuer(v string) {
	o.Issuer = &v
}

func (o V1AuthGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AuthGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cert) {
		toSerialize["cert"] = o.Cert
	}
	if !IsNil(o.EntryPoint) {
		toSerialize["entryPoint"] = o.EntryPoint
	}
	if !IsNil(o.IamType) {
		toSerialize["iamType"] = o.IamType
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	return toSerialize, nil
}

type NullableV1AuthGet200Response struct {
	value *V1AuthGet200Response
	isSet bool
}

func (v NullableV1AuthGet200Response) Get() *V1AuthGet200Response {
	return v.value
}

func (v *NullableV1AuthGet200Response) Set(val *V1AuthGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AuthGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AuthGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AuthGet200Response(val *V1AuthGet200Response) *NullableV1AuthGet200Response {
	return &NullableV1AuthGet200Response{value: val, isSet: true}
}

func (v NullableV1AuthGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AuthGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


