/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DiagnosticClearArpDeviceIdPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DiagnosticClearArpDeviceIdPutRequest{}

// V1DiagnosticClearArpDeviceIdPutRequest struct for V1DiagnosticClearArpDeviceIdPutRequest
type V1DiagnosticClearArpDeviceIdPutRequest struct {
	Entry []V1DiagnosticClearArpDeviceIdPutRequestEntryInner `json:"entry,omitempty"`
}

// NewV1DiagnosticClearArpDeviceIdPutRequest instantiates a new V1DiagnosticClearArpDeviceIdPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DiagnosticClearArpDeviceIdPutRequest() *V1DiagnosticClearArpDeviceIdPutRequest {
	this := V1DiagnosticClearArpDeviceIdPutRequest{}
	return &this
}

// NewV1DiagnosticClearArpDeviceIdPutRequestWithDefaults instantiates a new V1DiagnosticClearArpDeviceIdPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DiagnosticClearArpDeviceIdPutRequestWithDefaults() *V1DiagnosticClearArpDeviceIdPutRequest {
	this := V1DiagnosticClearArpDeviceIdPutRequest{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *V1DiagnosticClearArpDeviceIdPutRequest) GetEntry() []V1DiagnosticClearArpDeviceIdPutRequestEntryInner {
	if o == nil || IsNil(o.Entry) {
		var ret []V1DiagnosticClearArpDeviceIdPutRequestEntryInner
		return ret
	}
	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DiagnosticClearArpDeviceIdPutRequest) GetEntryOk() ([]V1DiagnosticClearArpDeviceIdPutRequestEntryInner, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *V1DiagnosticClearArpDeviceIdPutRequest) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given []V1DiagnosticClearArpDeviceIdPutRequestEntryInner and assigns it to the Entry field.
func (o *V1DiagnosticClearArpDeviceIdPutRequest) SetEntry(v []V1DiagnosticClearArpDeviceIdPutRequestEntryInner) {
	o.Entry = v
}

func (o V1DiagnosticClearArpDeviceIdPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DiagnosticClearArpDeviceIdPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	return toSerialize, nil
}

type NullableV1DiagnosticClearArpDeviceIdPutRequest struct {
	value *V1DiagnosticClearArpDeviceIdPutRequest
	isSet bool
}

func (v NullableV1DiagnosticClearArpDeviceIdPutRequest) Get() *V1DiagnosticClearArpDeviceIdPutRequest {
	return v.value
}

func (v *NullableV1DiagnosticClearArpDeviceIdPutRequest) Set(val *V1DiagnosticClearArpDeviceIdPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DiagnosticClearArpDeviceIdPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DiagnosticClearArpDeviceIdPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DiagnosticClearArpDeviceIdPutRequest(val *V1DiagnosticClearArpDeviceIdPutRequest) *NullableV1DiagnosticClearArpDeviceIdPutRequest {
	return &NullableV1DiagnosticClearArpDeviceIdPutRequest{value: val, isSet: true}
}

func (v NullableV1DiagnosticClearArpDeviceIdPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DiagnosticClearArpDeviceIdPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


