/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner{}

// V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner struct for V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner
type V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner struct {
	AllocatedPct *int32 `json:"allocatedPct,omitempty"`
	DefaultQueue *bool `json:"defaultQueue,omitempty"`
	ExcessWeight *int32 `json:"excessWeight,omitempty"`
	SlaClass *string `json:"slaClass,omitempty"`
	UtilizationKbps *float32 `json:"utilizationKbps,omitempty"`
	UtilizationPct *float32 `json:"utilizationPct,omitempty"`
}

// NewV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner instantiates a new V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner() *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner {
	this := V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner{}
	return &this
}

// NewV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInnerWithDefaults instantiates a new V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInnerWithDefaults() *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner {
	this := V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner{}
	return &this
}

// GetAllocatedPct returns the AllocatedPct field value if set, zero value otherwise.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetAllocatedPct() int32 {
	if o == nil || IsNil(o.AllocatedPct) {
		var ret int32
		return ret
	}
	return *o.AllocatedPct
}

// GetAllocatedPctOk returns a tuple with the AllocatedPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetAllocatedPctOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocatedPct) {
		return nil, false
	}
	return o.AllocatedPct, true
}

// HasAllocatedPct returns a boolean if a field has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) HasAllocatedPct() bool {
	if o != nil && !IsNil(o.AllocatedPct) {
		return true
	}

	return false
}

// SetAllocatedPct gets a reference to the given int32 and assigns it to the AllocatedPct field.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) SetAllocatedPct(v int32) {
	o.AllocatedPct = &v
}

// GetDefaultQueue returns the DefaultQueue field value if set, zero value otherwise.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetDefaultQueue() bool {
	if o == nil || IsNil(o.DefaultQueue) {
		var ret bool
		return ret
	}
	return *o.DefaultQueue
}

// GetDefaultQueueOk returns a tuple with the DefaultQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetDefaultQueueOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultQueue) {
		return nil, false
	}
	return o.DefaultQueue, true
}

// HasDefaultQueue returns a boolean if a field has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) HasDefaultQueue() bool {
	if o != nil && !IsNil(o.DefaultQueue) {
		return true
	}

	return false
}

// SetDefaultQueue gets a reference to the given bool and assigns it to the DefaultQueue field.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) SetDefaultQueue(v bool) {
	o.DefaultQueue = &v
}

// GetExcessWeight returns the ExcessWeight field value if set, zero value otherwise.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetExcessWeight() int32 {
	if o == nil || IsNil(o.ExcessWeight) {
		var ret int32
		return ret
	}
	return *o.ExcessWeight
}

// GetExcessWeightOk returns a tuple with the ExcessWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetExcessWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.ExcessWeight) {
		return nil, false
	}
	return o.ExcessWeight, true
}

// HasExcessWeight returns a boolean if a field has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) HasExcessWeight() bool {
	if o != nil && !IsNil(o.ExcessWeight) {
		return true
	}

	return false
}

// SetExcessWeight gets a reference to the given int32 and assigns it to the ExcessWeight field.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) SetExcessWeight(v int32) {
	o.ExcessWeight = &v
}

// GetSlaClass returns the SlaClass field value if set, zero value otherwise.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetSlaClass() string {
	if o == nil || IsNil(o.SlaClass) {
		var ret string
		return ret
	}
	return *o.SlaClass
}

// GetSlaClassOk returns a tuple with the SlaClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetSlaClassOk() (*string, bool) {
	if o == nil || IsNil(o.SlaClass) {
		return nil, false
	}
	return o.SlaClass, true
}

// HasSlaClass returns a boolean if a field has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) HasSlaClass() bool {
	if o != nil && !IsNil(o.SlaClass) {
		return true
	}

	return false
}

// SetSlaClass gets a reference to the given string and assigns it to the SlaClass field.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) SetSlaClass(v string) {
	o.SlaClass = &v
}

// GetUtilizationKbps returns the UtilizationKbps field value if set, zero value otherwise.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetUtilizationKbps() float32 {
	if o == nil || IsNil(o.UtilizationKbps) {
		var ret float32
		return ret
	}
	return *o.UtilizationKbps
}

// GetUtilizationKbpsOk returns a tuple with the UtilizationKbps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetUtilizationKbpsOk() (*float32, bool) {
	if o == nil || IsNil(o.UtilizationKbps) {
		return nil, false
	}
	return o.UtilizationKbps, true
}

// HasUtilizationKbps returns a boolean if a field has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) HasUtilizationKbps() bool {
	if o != nil && !IsNil(o.UtilizationKbps) {
		return true
	}

	return false
}

// SetUtilizationKbps gets a reference to the given float32 and assigns it to the UtilizationKbps field.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) SetUtilizationKbps(v float32) {
	o.UtilizationKbps = &v
}

// GetUtilizationPct returns the UtilizationPct field value if set, zero value otherwise.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetUtilizationPct() float32 {
	if o == nil || IsNil(o.UtilizationPct) {
		var ret float32
		return ret
	}
	return *o.UtilizationPct
}

// GetUtilizationPctOk returns a tuple with the UtilizationPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) GetUtilizationPctOk() (*float32, bool) {
	if o == nil || IsNil(o.UtilizationPct) {
		return nil, false
	}
	return o.UtilizationPct, true
}

// HasUtilizationPct returns a boolean if a field has been set.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) HasUtilizationPct() bool {
	if o != nil && !IsNil(o.UtilizationPct) {
		return true
	}

	return false
}

// SetUtilizationPct gets a reference to the given float32 and assigns it to the UtilizationPct field.
func (o *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) SetUtilizationPct(v float32) {
	o.UtilizationPct = &v
}

func (o V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocatedPct) {
		toSerialize["allocatedPct"] = o.AllocatedPct
	}
	if !IsNil(o.DefaultQueue) {
		toSerialize["defaultQueue"] = o.DefaultQueue
	}
	if !IsNil(o.ExcessWeight) {
		toSerialize["excessWeight"] = o.ExcessWeight
	}
	if !IsNil(o.SlaClass) {
		toSerialize["slaClass"] = o.SlaClass
	}
	if !IsNil(o.UtilizationKbps) {
		toSerialize["utilizationKbps"] = o.UtilizationKbps
	}
	if !IsNil(o.UtilizationPct) {
		toSerialize["utilizationPct"] = o.UtilizationPct
	}
	return toSerialize, nil
}

type NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner struct {
	value *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner
	isSet bool
}

func (v NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) Get() *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner {
	return v.value
}

func (v *NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) Set(val *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner(val *V2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) *NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner {
	return &NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner{value: val, isSet: true}
}

func (v NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2MonitoringCircuitsUtilizationPost200ResponseDataInnerQueueUtilizationInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


