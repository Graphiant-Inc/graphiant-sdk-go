/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2RuleEnabledisablePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2RuleEnabledisablePostRequest{}

// V2RuleEnabledisablePostRequest struct for V2RuleEnabledisablePostRequest
type V2RuleEnabledisablePostRequest struct {
	Enable *bool `json:"enable,omitempty"`
	RuleIdList []string `json:"ruleIdList,omitempty"`
}

// NewV2RuleEnabledisablePostRequest instantiates a new V2RuleEnabledisablePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2RuleEnabledisablePostRequest() *V2RuleEnabledisablePostRequest {
	this := V2RuleEnabledisablePostRequest{}
	return &this
}

// NewV2RuleEnabledisablePostRequestWithDefaults instantiates a new V2RuleEnabledisablePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2RuleEnabledisablePostRequestWithDefaults() *V2RuleEnabledisablePostRequest {
	this := V2RuleEnabledisablePostRequest{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *V2RuleEnabledisablePostRequest) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RuleEnabledisablePostRequest) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *V2RuleEnabledisablePostRequest) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *V2RuleEnabledisablePostRequest) SetEnable(v bool) {
	o.Enable = &v
}

// GetRuleIdList returns the RuleIdList field value if set, zero value otherwise.
func (o *V2RuleEnabledisablePostRequest) GetRuleIdList() []string {
	if o == nil || IsNil(o.RuleIdList) {
		var ret []string
		return ret
	}
	return o.RuleIdList
}

// GetRuleIdListOk returns a tuple with the RuleIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RuleEnabledisablePostRequest) GetRuleIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.RuleIdList) {
		return nil, false
	}
	return o.RuleIdList, true
}

// HasRuleIdList returns a boolean if a field has been set.
func (o *V2RuleEnabledisablePostRequest) HasRuleIdList() bool {
	if o != nil && !IsNil(o.RuleIdList) {
		return true
	}

	return false
}

// SetRuleIdList gets a reference to the given []string and assigns it to the RuleIdList field.
func (o *V2RuleEnabledisablePostRequest) SetRuleIdList(v []string) {
	o.RuleIdList = v
}

func (o V2RuleEnabledisablePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2RuleEnabledisablePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.RuleIdList) {
		toSerialize["ruleIdList"] = o.RuleIdList
	}
	return toSerialize, nil
}

type NullableV2RuleEnabledisablePostRequest struct {
	value *V2RuleEnabledisablePostRequest
	isSet bool
}

func (v NullableV2RuleEnabledisablePostRequest) Get() *V2RuleEnabledisablePostRequest {
	return v.value
}

func (v *NullableV2RuleEnabledisablePostRequest) Set(val *V2RuleEnabledisablePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2RuleEnabledisablePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2RuleEnabledisablePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2RuleEnabledisablePostRequest(val *V2RuleEnabledisablePostRequest) *NullableV2RuleEnabledisablePostRequest {
	return &NullableV2RuleEnabledisablePostRequest{value: val, isSet: true}
}

func (v NullableV2RuleEnabledisablePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2RuleEnabledisablePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


