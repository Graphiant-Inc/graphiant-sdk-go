/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup{}

// V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup struct for V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup
type V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup struct {
	Accesses *map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupAccessesValue `json:"accesses,omitempty"`
	Members *map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupMembersValue `json:"members,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup instantiates a new V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup() *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup {
	this := V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup{}
	return &this
}

// NewV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupWithDefaults instantiates a new V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupWithDefaults() *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup {
	this := V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup{}
	return &this
}

// GetAccesses returns the Accesses field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) GetAccesses() map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupAccessesValue {
	if o == nil || IsNil(o.Accesses) {
		var ret map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupAccessesValue
		return ret
	}
	return *o.Accesses
}

// GetAccessesOk returns a tuple with the Accesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) GetAccessesOk() (*map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupAccessesValue, bool) {
	if o == nil || IsNil(o.Accesses) {
		return nil, false
	}
	return o.Accesses, true
}

// HasAccesses returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) HasAccesses() bool {
	if o != nil && !IsNil(o.Accesses) {
		return true
	}

	return false
}

// SetAccesses gets a reference to the given map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupAccessesValue and assigns it to the Accesses field.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) SetAccesses(v map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupAccessesValue) {
	o.Accesses = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) GetMembers() map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupMembersValue {
	if o == nil || IsNil(o.Members) {
		var ret map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupMembersValue
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) GetMembersOk() (*map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupMembersValue, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupMembersValue and assigns it to the Members field.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) SetMembers(v map[string]V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroupMembersValue) {
	o.Members = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) SetName(v string) {
	o.Name = &v
}

func (o V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accesses) {
		toSerialize["accesses"] = o.Accesses
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup struct {
	value *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup
	isSet bool
}

func (v NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) Get() *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup {
	return v.value
}

func (v *NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) Set(val *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup(val *V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) *NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup {
	return &NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup{value: val, isSet: true}
}

func (v NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValueGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


