/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1MonitoringCircuitsBandwidthPost200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1MonitoringCircuitsBandwidthPost200ResponseDataInner{}

// V1MonitoringCircuitsBandwidthPost200ResponseDataInner struct for V1MonitoringCircuitsBandwidthPost200ResponseDataInner
type V1MonitoringCircuitsBandwidthPost200ResponseDataInner struct {
	Carrier *string `json:"carrier,omitempty"`
	DeviceId *int64 `json:"deviceId,omitempty"`
	DlBwKbpsSamples []V2MonitoringBfdPost200ResponseDataInnerSamplesInner `json:"dlBwKbpsSamples,omitempty"`
	Selector *V1MonitoringCircuitsBandwidthPostRequestSelectorsInner `json:"selector,omitempty"`
	UlBwKbpsSamples []V2MonitoringBfdPost200ResponseDataInnerSamplesInner `json:"ulBwKbpsSamples,omitempty"`
}

// NewV1MonitoringCircuitsBandwidthPost200ResponseDataInner instantiates a new V1MonitoringCircuitsBandwidthPost200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1MonitoringCircuitsBandwidthPost200ResponseDataInner() *V1MonitoringCircuitsBandwidthPost200ResponseDataInner {
	this := V1MonitoringCircuitsBandwidthPost200ResponseDataInner{}
	return &this
}

// NewV1MonitoringCircuitsBandwidthPost200ResponseDataInnerWithDefaults instantiates a new V1MonitoringCircuitsBandwidthPost200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1MonitoringCircuitsBandwidthPost200ResponseDataInnerWithDefaults() *V1MonitoringCircuitsBandwidthPost200ResponseDataInner {
	this := V1MonitoringCircuitsBandwidthPost200ResponseDataInner{}
	return &this
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetCarrier() string {
	if o == nil || IsNil(o.Carrier) {
		var ret string
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetCarrierOk() (*string, bool) {
	if o == nil || IsNil(o.Carrier) {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) HasCarrier() bool {
	if o != nil && !IsNil(o.Carrier) {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given string and assigns it to the Carrier field.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) SetCarrier(v string) {
	o.Carrier = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetDlBwKbpsSamples returns the DlBwKbpsSamples field value if set, zero value otherwise.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetDlBwKbpsSamples() []V2MonitoringBfdPost200ResponseDataInnerSamplesInner {
	if o == nil || IsNil(o.DlBwKbpsSamples) {
		var ret []V2MonitoringBfdPost200ResponseDataInnerSamplesInner
		return ret
	}
	return o.DlBwKbpsSamples
}

// GetDlBwKbpsSamplesOk returns a tuple with the DlBwKbpsSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetDlBwKbpsSamplesOk() ([]V2MonitoringBfdPost200ResponseDataInnerSamplesInner, bool) {
	if o == nil || IsNil(o.DlBwKbpsSamples) {
		return nil, false
	}
	return o.DlBwKbpsSamples, true
}

// HasDlBwKbpsSamples returns a boolean if a field has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) HasDlBwKbpsSamples() bool {
	if o != nil && !IsNil(o.DlBwKbpsSamples) {
		return true
	}

	return false
}

// SetDlBwKbpsSamples gets a reference to the given []V2MonitoringBfdPost200ResponseDataInnerSamplesInner and assigns it to the DlBwKbpsSamples field.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) SetDlBwKbpsSamples(v []V2MonitoringBfdPost200ResponseDataInnerSamplesInner) {
	o.DlBwKbpsSamples = v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetSelector() V1MonitoringCircuitsBandwidthPostRequestSelectorsInner {
	if o == nil || IsNil(o.Selector) {
		var ret V1MonitoringCircuitsBandwidthPostRequestSelectorsInner
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetSelectorOk() (*V1MonitoringCircuitsBandwidthPostRequestSelectorsInner, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given V1MonitoringCircuitsBandwidthPostRequestSelectorsInner and assigns it to the Selector field.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) SetSelector(v V1MonitoringCircuitsBandwidthPostRequestSelectorsInner) {
	o.Selector = &v
}

// GetUlBwKbpsSamples returns the UlBwKbpsSamples field value if set, zero value otherwise.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetUlBwKbpsSamples() []V2MonitoringBfdPost200ResponseDataInnerSamplesInner {
	if o == nil || IsNil(o.UlBwKbpsSamples) {
		var ret []V2MonitoringBfdPost200ResponseDataInnerSamplesInner
		return ret
	}
	return o.UlBwKbpsSamples
}

// GetUlBwKbpsSamplesOk returns a tuple with the UlBwKbpsSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) GetUlBwKbpsSamplesOk() ([]V2MonitoringBfdPost200ResponseDataInnerSamplesInner, bool) {
	if o == nil || IsNil(o.UlBwKbpsSamples) {
		return nil, false
	}
	return o.UlBwKbpsSamples, true
}

// HasUlBwKbpsSamples returns a boolean if a field has been set.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) HasUlBwKbpsSamples() bool {
	if o != nil && !IsNil(o.UlBwKbpsSamples) {
		return true
	}

	return false
}

// SetUlBwKbpsSamples gets a reference to the given []V2MonitoringBfdPost200ResponseDataInnerSamplesInner and assigns it to the UlBwKbpsSamples field.
func (o *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) SetUlBwKbpsSamples(v []V2MonitoringBfdPost200ResponseDataInnerSamplesInner) {
	o.UlBwKbpsSamples = v
}

func (o V1MonitoringCircuitsBandwidthPost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1MonitoringCircuitsBandwidthPost200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Carrier) {
		toSerialize["carrier"] = o.Carrier
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.DlBwKbpsSamples) {
		toSerialize["dlBwKbpsSamples"] = o.DlBwKbpsSamples
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.UlBwKbpsSamples) {
		toSerialize["ulBwKbpsSamples"] = o.UlBwKbpsSamples
	}
	return toSerialize, nil
}

type NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner struct {
	value *V1MonitoringCircuitsBandwidthPost200ResponseDataInner
	isSet bool
}

func (v NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner) Get() *V1MonitoringCircuitsBandwidthPost200ResponseDataInner {
	return v.value
}

func (v *NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner) Set(val *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner(val *V1MonitoringCircuitsBandwidthPost200ResponseDataInner) *NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner {
	return &NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner{value: val, isSet: true}
}

func (v NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1MonitoringCircuitsBandwidthPost200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


