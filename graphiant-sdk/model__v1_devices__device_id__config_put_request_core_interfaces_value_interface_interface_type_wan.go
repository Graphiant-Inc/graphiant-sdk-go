/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan{}

// V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan struct for V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan
type V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan struct {
	Gw *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGw `json:"gw,omitempty"`
	Type *string `json:"type,omitempty"`
	VrfName *string `json:"vrfName,omitempty"`
}

// NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan instantiates a new V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan() *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan {
	this := V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan{}
	return &this
}

// NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanWithDefaults instantiates a new V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanWithDefaults() *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan {
	this := V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan{}
	return &this
}

// GetGw returns the Gw field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) GetGw() V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGw {
	if o == nil || IsNil(o.Gw) {
		var ret V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGw
		return ret
	}
	return *o.Gw
}

// GetGwOk returns a tuple with the Gw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) GetGwOk() (*V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGw, bool) {
	if o == nil || IsNil(o.Gw) {
		return nil, false
	}
	return o.Gw, true
}

// HasGw returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) HasGw() bool {
	if o != nil && !IsNil(o.Gw) {
		return true
	}

	return false
}

// SetGw gets a reference to the given V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGw and assigns it to the Gw field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) SetGw(v V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGw) {
	o.Gw = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) SetType(v string) {
	o.Type = &v
}

// GetVrfName returns the VrfName field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) GetVrfName() string {
	if o == nil || IsNil(o.VrfName) {
		var ret string
		return ret
	}
	return *o.VrfName
}

// GetVrfNameOk returns a tuple with the VrfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) GetVrfNameOk() (*string, bool) {
	if o == nil || IsNil(o.VrfName) {
		return nil, false
	}
	return o.VrfName, true
}

// HasVrfName returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) HasVrfName() bool {
	if o != nil && !IsNil(o.VrfName) {
		return true
	}

	return false
}

// SetVrfName gets a reference to the given string and assigns it to the VrfName field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) SetVrfName(v string) {
	o.VrfName = &v
}

func (o V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gw) {
		toSerialize["gw"] = o.Gw
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VrfName) {
		toSerialize["vrfName"] = o.VrfName
	}
	return toSerialize, nil
}

type NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan struct {
	value *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan
	isSet bool
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) Get() *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan {
	return v.value
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) Set(val *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan(val *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan {
	return &NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan{value: val, isSet: true}
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


