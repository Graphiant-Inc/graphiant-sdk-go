/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1AuthUserGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AuthUserGet200Response{}

// V1AuthUserGet200Response struct for V1AuthUserGet200Response
type V1AuthUserGet200Response struct {
	UserId *string `json:"userId,omitempty"`
	EnterpriseId *int64 `json:"enterpriseId,omitempty"`
	Role *string `json:"role,omitempty"`
	UserName *string `json:"userName,omitempty"`
	EnterpriseName *string `json:"enterpriseName,omitempty"`
	Auth *string `json:"auth,omitempty"`
	Token *string `json:"token,omitempty"`
}

// NewV1AuthUserGet200Response instantiates a new V1AuthUserGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AuthUserGet200Response() *V1AuthUserGet200Response {
	this := V1AuthUserGet200Response{}
	return &this
}

// NewV1AuthUserGet200ResponseWithDefaults instantiates a new V1AuthUserGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AuthUserGet200ResponseWithDefaults() *V1AuthUserGet200Response {
	this := V1AuthUserGet200Response{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *V1AuthUserGet200Response) SetUserId(v string) {
	o.UserId = &v
}

// GetEnterpriseId returns the EnterpriseId field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetEnterpriseId() int64 {
	if o == nil || IsNil(o.EnterpriseId) {
		var ret int64
		return ret
	}
	return *o.EnterpriseId
}

// GetEnterpriseIdOk returns a tuple with the EnterpriseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetEnterpriseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EnterpriseId) {
		return nil, false
	}
	return o.EnterpriseId, true
}

// HasEnterpriseId returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasEnterpriseId() bool {
	if o != nil && !IsNil(o.EnterpriseId) {
		return true
	}

	return false
}

// SetEnterpriseId gets a reference to the given int64 and assigns it to the EnterpriseId field.
func (o *V1AuthUserGet200Response) SetEnterpriseId(v int64) {
	o.EnterpriseId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *V1AuthUserGet200Response) SetRole(v string) {
	o.Role = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *V1AuthUserGet200Response) SetUserName(v string) {
	o.UserName = &v
}

// GetEnterpriseName returns the EnterpriseName field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetEnterpriseName() string {
	if o == nil || IsNil(o.EnterpriseName) {
		var ret string
		return ret
	}
	return *o.EnterpriseName
}

// GetEnterpriseNameOk returns a tuple with the EnterpriseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetEnterpriseNameOk() (*string, bool) {
	if o == nil || IsNil(o.EnterpriseName) {
		return nil, false
	}
	return o.EnterpriseName, true
}

// HasEnterpriseName returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasEnterpriseName() bool {
	if o != nil && !IsNil(o.EnterpriseName) {
		return true
	}

	return false
}

// SetEnterpriseName gets a reference to the given string and assigns it to the EnterpriseName field.
func (o *V1AuthUserGet200Response) SetEnterpriseName(v string) {
	o.EnterpriseName = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetAuth() string {
	if o == nil || IsNil(o.Auth) {
		var ret string
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetAuthOk() (*string, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given string and assigns it to the Auth field.
func (o *V1AuthUserGet200Response) SetAuth(v string) {
	o.Auth = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *V1AuthUserGet200Response) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuthUserGet200Response) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *V1AuthUserGet200Response) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *V1AuthUserGet200Response) SetToken(v string) {
	o.Token = &v
}

func (o V1AuthUserGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AuthUserGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.EnterpriseId) {
		toSerialize["enterpriseId"] = o.EnterpriseId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.EnterpriseName) {
		toSerialize["enterpriseName"] = o.EnterpriseName
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableV1AuthUserGet200Response struct {
	value *V1AuthUserGet200Response
	isSet bool
}

func (v NullableV1AuthUserGet200Response) Get() *V1AuthUserGet200Response {
	return v.value
}

func (v *NullableV1AuthUserGet200Response) Set(val *V1AuthUserGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AuthUserGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AuthUserGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AuthUserGet200Response(val *V1AuthUserGet200Response) *NullableV1AuthUserGet200Response {
	return &NullableV1AuthUserGet200Response{value: val, isSet: true}
}

func (v NullableV1AuthUserGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AuthUserGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


