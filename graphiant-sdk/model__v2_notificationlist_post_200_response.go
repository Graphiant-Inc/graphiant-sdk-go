/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2NotificationlistPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2NotificationlistPost200Response{}

// V2NotificationlistPost200Response struct for V2NotificationlistPost200Response
type V2NotificationlistPost200Response struct {
	NotificationList []V2NotificationlistPost200ResponseNotificationListInner `json:"notificationList,omitempty"`
}

// NewV2NotificationlistPost200Response instantiates a new V2NotificationlistPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2NotificationlistPost200Response() *V2NotificationlistPost200Response {
	this := V2NotificationlistPost200Response{}
	return &this
}

// NewV2NotificationlistPost200ResponseWithDefaults instantiates a new V2NotificationlistPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2NotificationlistPost200ResponseWithDefaults() *V2NotificationlistPost200Response {
	this := V2NotificationlistPost200Response{}
	return &this
}

// GetNotificationList returns the NotificationList field value if set, zero value otherwise.
func (o *V2NotificationlistPost200Response) GetNotificationList() []V2NotificationlistPost200ResponseNotificationListInner {
	if o == nil || IsNil(o.NotificationList) {
		var ret []V2NotificationlistPost200ResponseNotificationListInner
		return ret
	}
	return o.NotificationList
}

// GetNotificationListOk returns a tuple with the NotificationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationlistPost200Response) GetNotificationListOk() ([]V2NotificationlistPost200ResponseNotificationListInner, bool) {
	if o == nil || IsNil(o.NotificationList) {
		return nil, false
	}
	return o.NotificationList, true
}

// HasNotificationList returns a boolean if a field has been set.
func (o *V2NotificationlistPost200Response) HasNotificationList() bool {
	if o != nil && !IsNil(o.NotificationList) {
		return true
	}

	return false
}

// SetNotificationList gets a reference to the given []V2NotificationlistPost200ResponseNotificationListInner and assigns it to the NotificationList field.
func (o *V2NotificationlistPost200Response) SetNotificationList(v []V2NotificationlistPost200ResponseNotificationListInner) {
	o.NotificationList = v
}

func (o V2NotificationlistPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2NotificationlistPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationList) {
		toSerialize["notificationList"] = o.NotificationList
	}
	return toSerialize, nil
}

type NullableV2NotificationlistPost200Response struct {
	value *V2NotificationlistPost200Response
	isSet bool
}

func (v NullableV2NotificationlistPost200Response) Get() *V2NotificationlistPost200Response {
	return v.value
}

func (v *NullableV2NotificationlistPost200Response) Set(val *V2NotificationlistPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV2NotificationlistPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV2NotificationlistPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2NotificationlistPost200Response(val *V2NotificationlistPost200Response) *NullableV2NotificationlistPost200Response {
	return &NullableV2NotificationlistPost200Response{value: val, isSet: true}
}

func (v NullableV2NotificationlistPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2NotificationlistPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


