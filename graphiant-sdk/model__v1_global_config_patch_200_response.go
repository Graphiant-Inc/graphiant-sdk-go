/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1GlobalConfigPatch200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GlobalConfigPatch200Response{}

// V1GlobalConfigPatch200Response struct for V1GlobalConfigPatch200Response
type V1GlobalConfigPatch200Response struct {
	GlobalPrefixSets *map[string]int64 `json:"globalPrefixSets,omitempty"`
	IpfixExporters *map[string]int64 `json:"ipfixExporters,omitempty"`
	PrefixSets *map[string]int64 `json:"prefixSets,omitempty"`
	RoutingPolicies *map[string]int64 `json:"routingPolicies,omitempty"`
	Snmps *map[string]int64 `json:"snmps,omitempty"`
	Status *string `json:"status,omitempty"`
	SyslogServers *map[string]int64 `json:"syslogServers,omitempty"`
	TrafficPolicies *map[string]int64 `json:"trafficPolicies,omitempty"`
	VpnProfiles *map[string]int64 `json:"vpnProfiles,omitempty"`
}

// NewV1GlobalConfigPatch200Response instantiates a new V1GlobalConfigPatch200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GlobalConfigPatch200Response() *V1GlobalConfigPatch200Response {
	this := V1GlobalConfigPatch200Response{}
	return &this
}

// NewV1GlobalConfigPatch200ResponseWithDefaults instantiates a new V1GlobalConfigPatch200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GlobalConfigPatch200ResponseWithDefaults() *V1GlobalConfigPatch200Response {
	this := V1GlobalConfigPatch200Response{}
	return &this
}

// GetGlobalPrefixSets returns the GlobalPrefixSets field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetGlobalPrefixSets() map[string]int64 {
	if o == nil || IsNil(o.GlobalPrefixSets) {
		var ret map[string]int64
		return ret
	}
	return *o.GlobalPrefixSets
}

// GetGlobalPrefixSetsOk returns a tuple with the GlobalPrefixSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetGlobalPrefixSetsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.GlobalPrefixSets) {
		return nil, false
	}
	return o.GlobalPrefixSets, true
}

// HasGlobalPrefixSets returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasGlobalPrefixSets() bool {
	if o != nil && !IsNil(o.GlobalPrefixSets) {
		return true
	}

	return false
}

// SetGlobalPrefixSets gets a reference to the given map[string]int64 and assigns it to the GlobalPrefixSets field.
func (o *V1GlobalConfigPatch200Response) SetGlobalPrefixSets(v map[string]int64) {
	o.GlobalPrefixSets = &v
}

// GetIpfixExporters returns the IpfixExporters field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetIpfixExporters() map[string]int64 {
	if o == nil || IsNil(o.IpfixExporters) {
		var ret map[string]int64
		return ret
	}
	return *o.IpfixExporters
}

// GetIpfixExportersOk returns a tuple with the IpfixExporters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetIpfixExportersOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.IpfixExporters) {
		return nil, false
	}
	return o.IpfixExporters, true
}

// HasIpfixExporters returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasIpfixExporters() bool {
	if o != nil && !IsNil(o.IpfixExporters) {
		return true
	}

	return false
}

// SetIpfixExporters gets a reference to the given map[string]int64 and assigns it to the IpfixExporters field.
func (o *V1GlobalConfigPatch200Response) SetIpfixExporters(v map[string]int64) {
	o.IpfixExporters = &v
}

// GetPrefixSets returns the PrefixSets field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetPrefixSets() map[string]int64 {
	if o == nil || IsNil(o.PrefixSets) {
		var ret map[string]int64
		return ret
	}
	return *o.PrefixSets
}

// GetPrefixSetsOk returns a tuple with the PrefixSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetPrefixSetsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.PrefixSets) {
		return nil, false
	}
	return o.PrefixSets, true
}

// HasPrefixSets returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasPrefixSets() bool {
	if o != nil && !IsNil(o.PrefixSets) {
		return true
	}

	return false
}

// SetPrefixSets gets a reference to the given map[string]int64 and assigns it to the PrefixSets field.
func (o *V1GlobalConfigPatch200Response) SetPrefixSets(v map[string]int64) {
	o.PrefixSets = &v
}

// GetRoutingPolicies returns the RoutingPolicies field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetRoutingPolicies() map[string]int64 {
	if o == nil || IsNil(o.RoutingPolicies) {
		var ret map[string]int64
		return ret
	}
	return *o.RoutingPolicies
}

// GetRoutingPoliciesOk returns a tuple with the RoutingPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetRoutingPoliciesOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.RoutingPolicies) {
		return nil, false
	}
	return o.RoutingPolicies, true
}

// HasRoutingPolicies returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasRoutingPolicies() bool {
	if o != nil && !IsNil(o.RoutingPolicies) {
		return true
	}

	return false
}

// SetRoutingPolicies gets a reference to the given map[string]int64 and assigns it to the RoutingPolicies field.
func (o *V1GlobalConfigPatch200Response) SetRoutingPolicies(v map[string]int64) {
	o.RoutingPolicies = &v
}

// GetSnmps returns the Snmps field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetSnmps() map[string]int64 {
	if o == nil || IsNil(o.Snmps) {
		var ret map[string]int64
		return ret
	}
	return *o.Snmps
}

// GetSnmpsOk returns a tuple with the Snmps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetSnmpsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Snmps) {
		return nil, false
	}
	return o.Snmps, true
}

// HasSnmps returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasSnmps() bool {
	if o != nil && !IsNil(o.Snmps) {
		return true
	}

	return false
}

// SetSnmps gets a reference to the given map[string]int64 and assigns it to the Snmps field.
func (o *V1GlobalConfigPatch200Response) SetSnmps(v map[string]int64) {
	o.Snmps = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *V1GlobalConfigPatch200Response) SetStatus(v string) {
	o.Status = &v
}

// GetSyslogServers returns the SyslogServers field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetSyslogServers() map[string]int64 {
	if o == nil || IsNil(o.SyslogServers) {
		var ret map[string]int64
		return ret
	}
	return *o.SyslogServers
}

// GetSyslogServersOk returns a tuple with the SyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetSyslogServersOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.SyslogServers) {
		return nil, false
	}
	return o.SyslogServers, true
}

// HasSyslogServers returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasSyslogServers() bool {
	if o != nil && !IsNil(o.SyslogServers) {
		return true
	}

	return false
}

// SetSyslogServers gets a reference to the given map[string]int64 and assigns it to the SyslogServers field.
func (o *V1GlobalConfigPatch200Response) SetSyslogServers(v map[string]int64) {
	o.SyslogServers = &v
}

// GetTrafficPolicies returns the TrafficPolicies field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetTrafficPolicies() map[string]int64 {
	if o == nil || IsNil(o.TrafficPolicies) {
		var ret map[string]int64
		return ret
	}
	return *o.TrafficPolicies
}

// GetTrafficPoliciesOk returns a tuple with the TrafficPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetTrafficPoliciesOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.TrafficPolicies) {
		return nil, false
	}
	return o.TrafficPolicies, true
}

// HasTrafficPolicies returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasTrafficPolicies() bool {
	if o != nil && !IsNil(o.TrafficPolicies) {
		return true
	}

	return false
}

// SetTrafficPolicies gets a reference to the given map[string]int64 and assigns it to the TrafficPolicies field.
func (o *V1GlobalConfigPatch200Response) SetTrafficPolicies(v map[string]int64) {
	o.TrafficPolicies = &v
}

// GetVpnProfiles returns the VpnProfiles field value if set, zero value otherwise.
func (o *V1GlobalConfigPatch200Response) GetVpnProfiles() map[string]int64 {
	if o == nil || IsNil(o.VpnProfiles) {
		var ret map[string]int64
		return ret
	}
	return *o.VpnProfiles
}

// GetVpnProfilesOk returns a tuple with the VpnProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalConfigPatch200Response) GetVpnProfilesOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.VpnProfiles) {
		return nil, false
	}
	return o.VpnProfiles, true
}

// HasVpnProfiles returns a boolean if a field has been set.
func (o *V1GlobalConfigPatch200Response) HasVpnProfiles() bool {
	if o != nil && !IsNil(o.VpnProfiles) {
		return true
	}

	return false
}

// SetVpnProfiles gets a reference to the given map[string]int64 and assigns it to the VpnProfiles field.
func (o *V1GlobalConfigPatch200Response) SetVpnProfiles(v map[string]int64) {
	o.VpnProfiles = &v
}

func (o V1GlobalConfigPatch200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GlobalConfigPatch200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GlobalPrefixSets) {
		toSerialize["globalPrefixSets"] = o.GlobalPrefixSets
	}
	if !IsNil(o.IpfixExporters) {
		toSerialize["ipfixExporters"] = o.IpfixExporters
	}
	if !IsNil(o.PrefixSets) {
		toSerialize["prefixSets"] = o.PrefixSets
	}
	if !IsNil(o.RoutingPolicies) {
		toSerialize["routingPolicies"] = o.RoutingPolicies
	}
	if !IsNil(o.Snmps) {
		toSerialize["snmps"] = o.Snmps
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SyslogServers) {
		toSerialize["syslogServers"] = o.SyslogServers
	}
	if !IsNil(o.TrafficPolicies) {
		toSerialize["trafficPolicies"] = o.TrafficPolicies
	}
	if !IsNil(o.VpnProfiles) {
		toSerialize["vpnProfiles"] = o.VpnProfiles
	}
	return toSerialize, nil
}

type NullableV1GlobalConfigPatch200Response struct {
	value *V1GlobalConfigPatch200Response
	isSet bool
}

func (v NullableV1GlobalConfigPatch200Response) Get() *V1GlobalConfigPatch200Response {
	return v.value
}

func (v *NullableV1GlobalConfigPatch200Response) Set(val *V1GlobalConfigPatch200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GlobalConfigPatch200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GlobalConfigPatch200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GlobalConfigPatch200Response(val *V1GlobalConfigPatch200Response) *NullableV1GlobalConfigPatch200Response {
	return &NullableV1GlobalConfigPatch200Response{value: val, isSet: true}
}

func (v NullableV1GlobalConfigPatch200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GlobalConfigPatch200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


