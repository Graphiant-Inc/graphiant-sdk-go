/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DeviceStatusHistoryPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DeviceStatusHistoryPostRequest{}

// V1DeviceStatusHistoryPostRequest struct for V1DeviceStatusHistoryPostRequest
type V1DeviceStatusHistoryPostRequest struct {
	DeviceIds []int64 `json:"deviceIds,omitempty"`
	Role *string `json:"role,omitempty"`
}

// NewV1DeviceStatusHistoryPostRequest instantiates a new V1DeviceStatusHistoryPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DeviceStatusHistoryPostRequest() *V1DeviceStatusHistoryPostRequest {
	this := V1DeviceStatusHistoryPostRequest{}
	return &this
}

// NewV1DeviceStatusHistoryPostRequestWithDefaults instantiates a new V1DeviceStatusHistoryPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DeviceStatusHistoryPostRequestWithDefaults() *V1DeviceStatusHistoryPostRequest {
	this := V1DeviceStatusHistoryPostRequest{}
	return &this
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *V1DeviceStatusHistoryPostRequest) GetDeviceIds() []int64 {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []int64
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeviceStatusHistoryPostRequest) GetDeviceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *V1DeviceStatusHistoryPostRequest) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []int64 and assigns it to the DeviceIds field.
func (o *V1DeviceStatusHistoryPostRequest) SetDeviceIds(v []int64) {
	o.DeviceIds = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *V1DeviceStatusHistoryPostRequest) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeviceStatusHistoryPostRequest) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *V1DeviceStatusHistoryPostRequest) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *V1DeviceStatusHistoryPostRequest) SetRole(v string) {
	o.Role = &v
}

func (o V1DeviceStatusHistoryPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DeviceStatusHistoryPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceIds) {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableV1DeviceStatusHistoryPostRequest struct {
	value *V1DeviceStatusHistoryPostRequest
	isSet bool
}

func (v NullableV1DeviceStatusHistoryPostRequest) Get() *V1DeviceStatusHistoryPostRequest {
	return v.value
}

func (v *NullableV1DeviceStatusHistoryPostRequest) Set(val *V1DeviceStatusHistoryPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeviceStatusHistoryPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeviceStatusHistoryPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeviceStatusHistoryPostRequest(val *V1DeviceStatusHistoryPostRequest) *NullableV1DeviceStatusHistoryPostRequest {
	return &NullableV1DeviceStatusHistoryPostRequest{value: val, isSet: true}
}

func (v NullableV1DeviceStatusHistoryPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeviceStatusHistoryPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


