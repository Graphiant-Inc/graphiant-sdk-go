/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1GlobalSyncPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GlobalSyncPostRequest{}

// V1GlobalSyncPostRequest struct for V1GlobalSyncPostRequest
type V1GlobalSyncPostRequest struct {
	DeviceIds []int64 `json:"deviceIds,omitempty"`
	IpfixExportedId *int64 `json:"ipfixExportedId,omitempty"`
	PrefixSetId *int64 `json:"prefixSetId,omitempty"`
	RoutingPolicyId *int64 `json:"routingPolicyId,omitempty"`
	SnmpId *int64 `json:"snmpId,omitempty"`
	SyslogServerId *int64 `json:"syslogServerId,omitempty"`
	TrafficPolicyId *int64 `json:"trafficPolicyId,omitempty"`
}

// NewV1GlobalSyncPostRequest instantiates a new V1GlobalSyncPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GlobalSyncPostRequest() *V1GlobalSyncPostRequest {
	this := V1GlobalSyncPostRequest{}
	return &this
}

// NewV1GlobalSyncPostRequestWithDefaults instantiates a new V1GlobalSyncPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GlobalSyncPostRequestWithDefaults() *V1GlobalSyncPostRequest {
	this := V1GlobalSyncPostRequest{}
	return &this
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetDeviceIds() []int64 {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []int64
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetDeviceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []int64 and assigns it to the DeviceIds field.
func (o *V1GlobalSyncPostRequest) SetDeviceIds(v []int64) {
	o.DeviceIds = v
}

// GetIpfixExportedId returns the IpfixExportedId field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetIpfixExportedId() int64 {
	if o == nil || IsNil(o.IpfixExportedId) {
		var ret int64
		return ret
	}
	return *o.IpfixExportedId
}

// GetIpfixExportedIdOk returns a tuple with the IpfixExportedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetIpfixExportedIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IpfixExportedId) {
		return nil, false
	}
	return o.IpfixExportedId, true
}

// HasIpfixExportedId returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasIpfixExportedId() bool {
	if o != nil && !IsNil(o.IpfixExportedId) {
		return true
	}

	return false
}

// SetIpfixExportedId gets a reference to the given int64 and assigns it to the IpfixExportedId field.
func (o *V1GlobalSyncPostRequest) SetIpfixExportedId(v int64) {
	o.IpfixExportedId = &v
}

// GetPrefixSetId returns the PrefixSetId field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetPrefixSetId() int64 {
	if o == nil || IsNil(o.PrefixSetId) {
		var ret int64
		return ret
	}
	return *o.PrefixSetId
}

// GetPrefixSetIdOk returns a tuple with the PrefixSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetPrefixSetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PrefixSetId) {
		return nil, false
	}
	return o.PrefixSetId, true
}

// HasPrefixSetId returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasPrefixSetId() bool {
	if o != nil && !IsNil(o.PrefixSetId) {
		return true
	}

	return false
}

// SetPrefixSetId gets a reference to the given int64 and assigns it to the PrefixSetId field.
func (o *V1GlobalSyncPostRequest) SetPrefixSetId(v int64) {
	o.PrefixSetId = &v
}

// GetRoutingPolicyId returns the RoutingPolicyId field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetRoutingPolicyId() int64 {
	if o == nil || IsNil(o.RoutingPolicyId) {
		var ret int64
		return ret
	}
	return *o.RoutingPolicyId
}

// GetRoutingPolicyIdOk returns a tuple with the RoutingPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetRoutingPolicyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RoutingPolicyId) {
		return nil, false
	}
	return o.RoutingPolicyId, true
}

// HasRoutingPolicyId returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasRoutingPolicyId() bool {
	if o != nil && !IsNil(o.RoutingPolicyId) {
		return true
	}

	return false
}

// SetRoutingPolicyId gets a reference to the given int64 and assigns it to the RoutingPolicyId field.
func (o *V1GlobalSyncPostRequest) SetRoutingPolicyId(v int64) {
	o.RoutingPolicyId = &v
}

// GetSnmpId returns the SnmpId field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetSnmpId() int64 {
	if o == nil || IsNil(o.SnmpId) {
		var ret int64
		return ret
	}
	return *o.SnmpId
}

// GetSnmpIdOk returns a tuple with the SnmpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetSnmpIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SnmpId) {
		return nil, false
	}
	return o.SnmpId, true
}

// HasSnmpId returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasSnmpId() bool {
	if o != nil && !IsNil(o.SnmpId) {
		return true
	}

	return false
}

// SetSnmpId gets a reference to the given int64 and assigns it to the SnmpId field.
func (o *V1GlobalSyncPostRequest) SetSnmpId(v int64) {
	o.SnmpId = &v
}

// GetSyslogServerId returns the SyslogServerId field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetSyslogServerId() int64 {
	if o == nil || IsNil(o.SyslogServerId) {
		var ret int64
		return ret
	}
	return *o.SyslogServerId
}

// GetSyslogServerIdOk returns a tuple with the SyslogServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetSyslogServerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SyslogServerId) {
		return nil, false
	}
	return o.SyslogServerId, true
}

// HasSyslogServerId returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasSyslogServerId() bool {
	if o != nil && !IsNil(o.SyslogServerId) {
		return true
	}

	return false
}

// SetSyslogServerId gets a reference to the given int64 and assigns it to the SyslogServerId field.
func (o *V1GlobalSyncPostRequest) SetSyslogServerId(v int64) {
	o.SyslogServerId = &v
}

// GetTrafficPolicyId returns the TrafficPolicyId field value if set, zero value otherwise.
func (o *V1GlobalSyncPostRequest) GetTrafficPolicyId() int64 {
	if o == nil || IsNil(o.TrafficPolicyId) {
		var ret int64
		return ret
	}
	return *o.TrafficPolicyId
}

// GetTrafficPolicyIdOk returns a tuple with the TrafficPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlobalSyncPostRequest) GetTrafficPolicyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TrafficPolicyId) {
		return nil, false
	}
	return o.TrafficPolicyId, true
}

// HasTrafficPolicyId returns a boolean if a field has been set.
func (o *V1GlobalSyncPostRequest) HasTrafficPolicyId() bool {
	if o != nil && !IsNil(o.TrafficPolicyId) {
		return true
	}

	return false
}

// SetTrafficPolicyId gets a reference to the given int64 and assigns it to the TrafficPolicyId field.
func (o *V1GlobalSyncPostRequest) SetTrafficPolicyId(v int64) {
	o.TrafficPolicyId = &v
}

func (o V1GlobalSyncPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GlobalSyncPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceIds) {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	if !IsNil(o.IpfixExportedId) {
		toSerialize["ipfixExportedId"] = o.IpfixExportedId
	}
	if !IsNil(o.PrefixSetId) {
		toSerialize["prefixSetId"] = o.PrefixSetId
	}
	if !IsNil(o.RoutingPolicyId) {
		toSerialize["routingPolicyId"] = o.RoutingPolicyId
	}
	if !IsNil(o.SnmpId) {
		toSerialize["snmpId"] = o.SnmpId
	}
	if !IsNil(o.SyslogServerId) {
		toSerialize["syslogServerId"] = o.SyslogServerId
	}
	if !IsNil(o.TrafficPolicyId) {
		toSerialize["trafficPolicyId"] = o.TrafficPolicyId
	}
	return toSerialize, nil
}

type NullableV1GlobalSyncPostRequest struct {
	value *V1GlobalSyncPostRequest
	isSet bool
}

func (v NullableV1GlobalSyncPostRequest) Get() *V1GlobalSyncPostRequest {
	return v.value
}

func (v *NullableV1GlobalSyncPostRequest) Set(val *V1GlobalSyncPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GlobalSyncPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GlobalSyncPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GlobalSyncPostRequest(val *V1GlobalSyncPostRequest) *NullableV1GlobalSyncPostRequest {
	return &NullableV1GlobalSyncPostRequest{value: val, isSet: true}
}

func (v NullableV1GlobalSyncPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GlobalSyncPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


