/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DeviceRoutingVrfBgpRouteCountPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DeviceRoutingVrfBgpRouteCountPostRequest{}

// V1DeviceRoutingVrfBgpRouteCountPostRequest struct for V1DeviceRoutingVrfBgpRouteCountPostRequest
type V1DeviceRoutingVrfBgpRouteCountPostRequest struct {
	DeviceId *int64 `json:"deviceId,omitempty"`
	VrfName []string `json:"vrfName,omitempty"`
}

// NewV1DeviceRoutingVrfBgpRouteCountPostRequest instantiates a new V1DeviceRoutingVrfBgpRouteCountPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DeviceRoutingVrfBgpRouteCountPostRequest() *V1DeviceRoutingVrfBgpRouteCountPostRequest {
	this := V1DeviceRoutingVrfBgpRouteCountPostRequest{}
	return &this
}

// NewV1DeviceRoutingVrfBgpRouteCountPostRequestWithDefaults instantiates a new V1DeviceRoutingVrfBgpRouteCountPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DeviceRoutingVrfBgpRouteCountPostRequestWithDefaults() *V1DeviceRoutingVrfBgpRouteCountPostRequest {
	this := V1DeviceRoutingVrfBgpRouteCountPostRequest{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetVrfName returns the VrfName field value if set, zero value otherwise.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) GetVrfName() []string {
	if o == nil || IsNil(o.VrfName) {
		var ret []string
		return ret
	}
	return o.VrfName
}

// GetVrfNameOk returns a tuple with the VrfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) GetVrfNameOk() ([]string, bool) {
	if o == nil || IsNil(o.VrfName) {
		return nil, false
	}
	return o.VrfName, true
}

// HasVrfName returns a boolean if a field has been set.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) HasVrfName() bool {
	if o != nil && !IsNil(o.VrfName) {
		return true
	}

	return false
}

// SetVrfName gets a reference to the given []string and assigns it to the VrfName field.
func (o *V1DeviceRoutingVrfBgpRouteCountPostRequest) SetVrfName(v []string) {
	o.VrfName = v
}

func (o V1DeviceRoutingVrfBgpRouteCountPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DeviceRoutingVrfBgpRouteCountPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.VrfName) {
		toSerialize["vrfName"] = o.VrfName
	}
	return toSerialize, nil
}

type NullableV1DeviceRoutingVrfBgpRouteCountPostRequest struct {
	value *V1DeviceRoutingVrfBgpRouteCountPostRequest
	isSet bool
}

func (v NullableV1DeviceRoutingVrfBgpRouteCountPostRequest) Get() *V1DeviceRoutingVrfBgpRouteCountPostRequest {
	return v.value
}

func (v *NullableV1DeviceRoutingVrfBgpRouteCountPostRequest) Set(val *V1DeviceRoutingVrfBgpRouteCountPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeviceRoutingVrfBgpRouteCountPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeviceRoutingVrfBgpRouteCountPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeviceRoutingVrfBgpRouteCountPostRequest(val *V1DeviceRoutingVrfBgpRouteCountPostRequest) *NullableV1DeviceRoutingVrfBgpRouteCountPostRequest {
	return &NullableV1DeviceRoutingVrfBgpRouteCountPostRequest{value: val, isSet: true}
}

func (v NullableV1DeviceRoutingVrfBgpRouteCountPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeviceRoutingVrfBgpRouteCountPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


