/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner{}

// V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner struct for V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner
type V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner struct {
	Quality *string `json:"quality,omitempty"`
	SnapshotTime *V1AlarmHistoryGet200ResponseHistoryInnerTime `json:"snapshotTime,omitempty"`
}

// NewV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner instantiates a new V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner() *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner {
	this := V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner{}
	return &this
}

// NewV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInnerWithDefaults instantiates a new V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInnerWithDefaults() *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner {
	this := V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner{}
	return &this
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) GetQuality() string {
	if o == nil || IsNil(o.Quality) {
		var ret string
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) GetQualityOk() (*string, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given string and assigns it to the Quality field.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) SetQuality(v string) {
	o.Quality = &v
}

// GetSnapshotTime returns the SnapshotTime field value if set, zero value otherwise.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) GetSnapshotTime() V1AlarmHistoryGet200ResponseHistoryInnerTime {
	if o == nil || IsNil(o.SnapshotTime) {
		var ret V1AlarmHistoryGet200ResponseHistoryInnerTime
		return ret
	}
	return *o.SnapshotTime
}

// GetSnapshotTimeOk returns a tuple with the SnapshotTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) GetSnapshotTimeOk() (*V1AlarmHistoryGet200ResponseHistoryInnerTime, bool) {
	if o == nil || IsNil(o.SnapshotTime) {
		return nil, false
	}
	return o.SnapshotTime, true
}

// HasSnapshotTime returns a boolean if a field has been set.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) HasSnapshotTime() bool {
	if o != nil && !IsNil(o.SnapshotTime) {
		return true
	}

	return false
}

// SetSnapshotTime gets a reference to the given V1AlarmHistoryGet200ResponseHistoryInnerTime and assigns it to the SnapshotTime field.
func (o *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) SetSnapshotTime(v V1AlarmHistoryGet200ResponseHistoryInnerTime) {
	o.SnapshotTime = &v
}

func (o V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if !IsNil(o.SnapshotTime) {
		toSerialize["snapshotTime"] = o.SnapshotTime
	}
	return toSerialize, nil
}

type NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner struct {
	value *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner
	isSet bool
}

func (v NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) Get() *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner {
	return v.value
}

func (v *NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) Set(val *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner(val *V2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) *NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner {
	return &NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner{value: val, isSet: true}
}

func (v NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2DeviceDeviceIdTopologyPost200ResponseSnapshotsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


