/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost{}

// V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost struct for V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost
type V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost struct {
	Dynamic *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostDynamic `json:"dynamic,omitempty"`
	Static *int32 `json:"static,omitempty"`
}

// NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost instantiates a new V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost() *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost {
	this := V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost{}
	return &this
}

// NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostWithDefaults instantiates a new V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostWithDefaults() *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost {
	this := V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) GetDynamic() V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostDynamic {
	if o == nil || IsNil(o.Dynamic) {
		var ret V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostDynamic
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) GetDynamicOk() (*V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostDynamic, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostDynamic and assigns it to the Dynamic field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) SetDynamic(v V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCostDynamic) {
	o.Dynamic = &v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) GetStatic() int32 {
	if o == nil || IsNil(o.Static) {
		var ret int32
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) GetStaticOk() (*int32, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given int32 and assigns it to the Static field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) SetStatic(v int32) {
	o.Static = &v
}

func (o V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	return toSerialize, nil
}

type NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost struct {
	value *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost
	isSet bool
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) Get() *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost {
	return v.value
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) Set(val *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost(val *V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost {
	return &NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost{value: val, isSet: true}
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighborCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


