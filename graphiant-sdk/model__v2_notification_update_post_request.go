/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2NotificationUpdatePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2NotificationUpdatePostRequest{}

// V2NotificationUpdatePostRequest struct for V2NotificationUpdatePostRequest
type V2NotificationUpdatePostRequest struct {
	NotificationBody *V2NotificationCreatePostRequestNotificationBody `json:"notificationBody,omitempty"`
	NotificationIdList []string `json:"notificationIdList,omitempty"`
}

// NewV2NotificationUpdatePostRequest instantiates a new V2NotificationUpdatePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2NotificationUpdatePostRequest() *V2NotificationUpdatePostRequest {
	this := V2NotificationUpdatePostRequest{}
	return &this
}

// NewV2NotificationUpdatePostRequestWithDefaults instantiates a new V2NotificationUpdatePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2NotificationUpdatePostRequestWithDefaults() *V2NotificationUpdatePostRequest {
	this := V2NotificationUpdatePostRequest{}
	return &this
}

// GetNotificationBody returns the NotificationBody field value if set, zero value otherwise.
func (o *V2NotificationUpdatePostRequest) GetNotificationBody() V2NotificationCreatePostRequestNotificationBody {
	if o == nil || IsNil(o.NotificationBody) {
		var ret V2NotificationCreatePostRequestNotificationBody
		return ret
	}
	return *o.NotificationBody
}

// GetNotificationBodyOk returns a tuple with the NotificationBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationUpdatePostRequest) GetNotificationBodyOk() (*V2NotificationCreatePostRequestNotificationBody, bool) {
	if o == nil || IsNil(o.NotificationBody) {
		return nil, false
	}
	return o.NotificationBody, true
}

// HasNotificationBody returns a boolean if a field has been set.
func (o *V2NotificationUpdatePostRequest) HasNotificationBody() bool {
	if o != nil && !IsNil(o.NotificationBody) {
		return true
	}

	return false
}

// SetNotificationBody gets a reference to the given V2NotificationCreatePostRequestNotificationBody and assigns it to the NotificationBody field.
func (o *V2NotificationUpdatePostRequest) SetNotificationBody(v V2NotificationCreatePostRequestNotificationBody) {
	o.NotificationBody = &v
}

// GetNotificationIdList returns the NotificationIdList field value if set, zero value otherwise.
func (o *V2NotificationUpdatePostRequest) GetNotificationIdList() []string {
	if o == nil || IsNil(o.NotificationIdList) {
		var ret []string
		return ret
	}
	return o.NotificationIdList
}

// GetNotificationIdListOk returns a tuple with the NotificationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationUpdatePostRequest) GetNotificationIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationIdList) {
		return nil, false
	}
	return o.NotificationIdList, true
}

// HasNotificationIdList returns a boolean if a field has been set.
func (o *V2NotificationUpdatePostRequest) HasNotificationIdList() bool {
	if o != nil && !IsNil(o.NotificationIdList) {
		return true
	}

	return false
}

// SetNotificationIdList gets a reference to the given []string and assigns it to the NotificationIdList field.
func (o *V2NotificationUpdatePostRequest) SetNotificationIdList(v []string) {
	o.NotificationIdList = v
}

func (o V2NotificationUpdatePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2NotificationUpdatePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationBody) {
		toSerialize["notificationBody"] = o.NotificationBody
	}
	if !IsNil(o.NotificationIdList) {
		toSerialize["notificationIdList"] = o.NotificationIdList
	}
	return toSerialize, nil
}

type NullableV2NotificationUpdatePostRequest struct {
	value *V2NotificationUpdatePostRequest
	isSet bool
}

func (v NullableV2NotificationUpdatePostRequest) Get() *V2NotificationUpdatePostRequest {
	return v.value
}

func (v *NullableV2NotificationUpdatePostRequest) Set(val *V2NotificationUpdatePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2NotificationUpdatePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2NotificationUpdatePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2NotificationUpdatePostRequest(val *V2NotificationUpdatePostRequest) *NullableV2NotificationUpdatePostRequest {
	return &NullableV2NotificationUpdatePostRequest{value: val, isSet: true}
}

func (v NullableV2NotificationUpdatePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2NotificationUpdatePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


