/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2AuditLogsPostRequestSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2AuditLogsPostRequestSelector{}

// V2AuditLogsPostRequestSelector struct for V2AuditLogsPostRequestSelector
type V2AuditLogsPostRequestSelector struct {
	Categories []string `json:"categories,omitempty"`
	Entities []V1ActivityLogsPostRequestSelectorJobEntity `json:"entities,omitempty"`
	JobTypes []string `json:"jobTypes,omitempty"`
	Targets []V1ActivityLogsPostRequestSelectorJobEntity `json:"targets,omitempty"`
	Users []string `json:"users,omitempty"`
}

// NewV2AuditLogsPostRequestSelector instantiates a new V2AuditLogsPostRequestSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2AuditLogsPostRequestSelector() *V2AuditLogsPostRequestSelector {
	this := V2AuditLogsPostRequestSelector{}
	return &this
}

// NewV2AuditLogsPostRequestSelectorWithDefaults instantiates a new V2AuditLogsPostRequestSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2AuditLogsPostRequestSelectorWithDefaults() *V2AuditLogsPostRequestSelector {
	this := V2AuditLogsPostRequestSelector{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *V2AuditLogsPostRequestSelector) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AuditLogsPostRequestSelector) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *V2AuditLogsPostRequestSelector) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *V2AuditLogsPostRequestSelector) SetCategories(v []string) {
	o.Categories = v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *V2AuditLogsPostRequestSelector) GetEntities() []V1ActivityLogsPostRequestSelectorJobEntity {
	if o == nil || IsNil(o.Entities) {
		var ret []V1ActivityLogsPostRequestSelectorJobEntity
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AuditLogsPostRequestSelector) GetEntitiesOk() ([]V1ActivityLogsPostRequestSelectorJobEntity, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *V2AuditLogsPostRequestSelector) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []V1ActivityLogsPostRequestSelectorJobEntity and assigns it to the Entities field.
func (o *V2AuditLogsPostRequestSelector) SetEntities(v []V1ActivityLogsPostRequestSelectorJobEntity) {
	o.Entities = v
}

// GetJobTypes returns the JobTypes field value if set, zero value otherwise.
func (o *V2AuditLogsPostRequestSelector) GetJobTypes() []string {
	if o == nil || IsNil(o.JobTypes) {
		var ret []string
		return ret
	}
	return o.JobTypes
}

// GetJobTypesOk returns a tuple with the JobTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AuditLogsPostRequestSelector) GetJobTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.JobTypes) {
		return nil, false
	}
	return o.JobTypes, true
}

// HasJobTypes returns a boolean if a field has been set.
func (o *V2AuditLogsPostRequestSelector) HasJobTypes() bool {
	if o != nil && !IsNil(o.JobTypes) {
		return true
	}

	return false
}

// SetJobTypes gets a reference to the given []string and assigns it to the JobTypes field.
func (o *V2AuditLogsPostRequestSelector) SetJobTypes(v []string) {
	o.JobTypes = v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *V2AuditLogsPostRequestSelector) GetTargets() []V1ActivityLogsPostRequestSelectorJobEntity {
	if o == nil || IsNil(o.Targets) {
		var ret []V1ActivityLogsPostRequestSelectorJobEntity
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AuditLogsPostRequestSelector) GetTargetsOk() ([]V1ActivityLogsPostRequestSelectorJobEntity, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *V2AuditLogsPostRequestSelector) HasTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []V1ActivityLogsPostRequestSelectorJobEntity and assigns it to the Targets field.
func (o *V2AuditLogsPostRequestSelector) SetTargets(v []V1ActivityLogsPostRequestSelectorJobEntity) {
	o.Targets = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *V2AuditLogsPostRequestSelector) GetUsers() []string {
	if o == nil || IsNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AuditLogsPostRequestSelector) GetUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *V2AuditLogsPostRequestSelector) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *V2AuditLogsPostRequestSelector) SetUsers(v []string) {
	o.Users = v
}

func (o V2AuditLogsPostRequestSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2AuditLogsPostRequestSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	if !IsNil(o.JobTypes) {
		toSerialize["jobTypes"] = o.JobTypes
	}
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableV2AuditLogsPostRequestSelector struct {
	value *V2AuditLogsPostRequestSelector
	isSet bool
}

func (v NullableV2AuditLogsPostRequestSelector) Get() *V2AuditLogsPostRequestSelector {
	return v.value
}

func (v *NullableV2AuditLogsPostRequestSelector) Set(val *V2AuditLogsPostRequestSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AuditLogsPostRequestSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AuditLogsPostRequestSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AuditLogsPostRequestSelector(val *V2AuditLogsPostRequestSelector) *NullableV2AuditLogsPostRequestSelector {
	return &NullableV2AuditLogsPostRequestSelector{value: val, isSet: true}
}

func (v NullableV2AuditLogsPostRequestSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AuditLogsPostRequestSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


