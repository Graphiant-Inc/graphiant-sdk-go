/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2NotificationCreatePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2NotificationCreatePostRequest{}

// V2NotificationCreatePostRequest struct for V2NotificationCreatePostRequest
type V2NotificationCreatePostRequest struct {
	NotificationBody *V2NotificationCreatePostRequestNotificationBody `json:"notificationBody,omitempty"`
	RuleIdList []string `json:"ruleIdList,omitempty"`
}

// NewV2NotificationCreatePostRequest instantiates a new V2NotificationCreatePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2NotificationCreatePostRequest() *V2NotificationCreatePostRequest {
	this := V2NotificationCreatePostRequest{}
	return &this
}

// NewV2NotificationCreatePostRequestWithDefaults instantiates a new V2NotificationCreatePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2NotificationCreatePostRequestWithDefaults() *V2NotificationCreatePostRequest {
	this := V2NotificationCreatePostRequest{}
	return &this
}

// GetNotificationBody returns the NotificationBody field value if set, zero value otherwise.
func (o *V2NotificationCreatePostRequest) GetNotificationBody() V2NotificationCreatePostRequestNotificationBody {
	if o == nil || IsNil(o.NotificationBody) {
		var ret V2NotificationCreatePostRequestNotificationBody
		return ret
	}
	return *o.NotificationBody
}

// GetNotificationBodyOk returns a tuple with the NotificationBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationCreatePostRequest) GetNotificationBodyOk() (*V2NotificationCreatePostRequestNotificationBody, bool) {
	if o == nil || IsNil(o.NotificationBody) {
		return nil, false
	}
	return o.NotificationBody, true
}

// HasNotificationBody returns a boolean if a field has been set.
func (o *V2NotificationCreatePostRequest) HasNotificationBody() bool {
	if o != nil && !IsNil(o.NotificationBody) {
		return true
	}

	return false
}

// SetNotificationBody gets a reference to the given V2NotificationCreatePostRequestNotificationBody and assigns it to the NotificationBody field.
func (o *V2NotificationCreatePostRequest) SetNotificationBody(v V2NotificationCreatePostRequestNotificationBody) {
	o.NotificationBody = &v
}

// GetRuleIdList returns the RuleIdList field value if set, zero value otherwise.
func (o *V2NotificationCreatePostRequest) GetRuleIdList() []string {
	if o == nil || IsNil(o.RuleIdList) {
		var ret []string
		return ret
	}
	return o.RuleIdList
}

// GetRuleIdListOk returns a tuple with the RuleIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationCreatePostRequest) GetRuleIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.RuleIdList) {
		return nil, false
	}
	return o.RuleIdList, true
}

// HasRuleIdList returns a boolean if a field has been set.
func (o *V2NotificationCreatePostRequest) HasRuleIdList() bool {
	if o != nil && !IsNil(o.RuleIdList) {
		return true
	}

	return false
}

// SetRuleIdList gets a reference to the given []string and assigns it to the RuleIdList field.
func (o *V2NotificationCreatePostRequest) SetRuleIdList(v []string) {
	o.RuleIdList = v
}

func (o V2NotificationCreatePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2NotificationCreatePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationBody) {
		toSerialize["notificationBody"] = o.NotificationBody
	}
	if !IsNil(o.RuleIdList) {
		toSerialize["ruleIdList"] = o.RuleIdList
	}
	return toSerialize, nil
}

type NullableV2NotificationCreatePostRequest struct {
	value *V2NotificationCreatePostRequest
	isSet bool
}

func (v NullableV2NotificationCreatePostRequest) Get() *V2NotificationCreatePostRequest {
	return v.value
}

func (v *NullableV2NotificationCreatePostRequest) Set(val *V2NotificationCreatePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2NotificationCreatePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2NotificationCreatePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2NotificationCreatePostRequest(val *V2NotificationCreatePostRequest) *NullableV2NotificationCreatePostRequest {
	return &NullableV2NotificationCreatePostRequest{value: val, isSet: true}
}

func (v NullableV2NotificationCreatePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2NotificationCreatePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


