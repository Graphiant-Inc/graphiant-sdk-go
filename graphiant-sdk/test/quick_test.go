/*
Graphiant APIs
Testing DefaultAPIService
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);
package graphiant_sdk

import (
	"context"
	"encoding/json"
	"io"
	"os"
	"testing"

	openapi "github.com/GIT_USER_ID/GIT_REPO_ID"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/require"
)

func Test_edge_summary(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)
	t.Run("Test DefaultAPIService V1AuthLoginPost", func(t *testing.T) {
		username := os.Getenv("username")
		password := os.Getenv("password")
		require.NotEmpty(t, username, "username should not be empty")
		require.NotEmpty(t, password, "password should not be empty")

		authReq := openapi.NewV1AuthLoginPostRequest()
		authReq.SetUsername(username)
		authReq.SetPassword(password)

		//=================== Get Auth Token ==================

		t.Log("Calling V1AuthLoginPost")
		_, httpRes, err := apiClient.DefaultAPI.
			V1AuthLoginPost(context.Background()).
			V1AuthLoginPostRequest(*authReq).
			Execute()
		require.NoError(t, err, "http call returned error")
		require.NotNil(t, httpRes, "V1AuthLoginPost API response is nil")
		defer httpRes.Body.Close()

		var result struct {
			Auth        bool   `json:"auth"`
			AccountType string `json:"accountType"`
			Token       string `json:"token"`
		}
		body, err := io.ReadAll(httpRes.Body)
		require.NoError(t, err, "error while reading the response body")
		require.NoError(t, json.Unmarshal(body, &result), "error while unmarshalling the response body")
		t.Logf("Auth token: %v\n", result)

		//=================== Get Edges Summary ==================

		t.Log("Calling V1EdgesSummaryGet")
		resp, httpRes, err := apiClient.DefaultAPI.
			V1EdgesSummaryGet(context.Background()).
			Authorization("Bearer " + result.Token).
			Execute()
		require.NoError(t, err, "Get edges summary API request failed")
		require.NotNil(t, httpRes, "Get edges summary API response is nil")
		defer httpRes.Body.Close()

		summary, err := json.MarshalIndent(resp.GetEdgesSummary(), "", "  ")
		require.NoError(t, err, "error while marshalling edge summary")
		t.Logf("Edge summary response: %s, http status: %v", summary, httpRes.StatusCode)
	})
}
