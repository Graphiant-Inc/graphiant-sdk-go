/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue{}

// V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue struct for V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue
type V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue struct {
	Count *int32 `json:"count,omitempty"`
	Snapshots []V1DeviceSnapshotGet200ResponseFirstSnapshot `json:"snapshots,omitempty"`
}

// NewV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue instantiates a new V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue() *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue {
	this := V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue{}
	return &this
}

// NewV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValueWithDefaults instantiates a new V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValueWithDefaults() *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue {
	this := V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) SetCount(v int32) {
	o.Count = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) GetSnapshots() []V1DeviceSnapshotGet200ResponseFirstSnapshot {
	if o == nil || IsNil(o.Snapshots) {
		var ret []V1DeviceSnapshotGet200ResponseFirstSnapshot
		return ret
	}
	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) GetSnapshotsOk() ([]V1DeviceSnapshotGet200ResponseFirstSnapshot, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) HasSnapshots() bool {
	if o != nil && !IsNil(o.Snapshots) {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given []V1DeviceSnapshotGet200ResponseFirstSnapshot and assigns it to the Snapshots field.
func (o *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) SetSnapshots(v []V1DeviceSnapshotGet200ResponseFirstSnapshot) {
	o.Snapshots = v
}

func (o V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Snapshots) {
		toSerialize["snapshots"] = o.Snapshots
	}
	return toSerialize, nil
}

type NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue struct {
	value *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue
	isSet bool
}

func (v NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) Get() *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue {
	return v.value
}

func (v *NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) Set(val *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue(val *V1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) *NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue {
	return &NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue{value: val, isSet: true}
}

func (v NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EnterpriseSnapshotGet200ResponseDeviceSnapshotMapValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


