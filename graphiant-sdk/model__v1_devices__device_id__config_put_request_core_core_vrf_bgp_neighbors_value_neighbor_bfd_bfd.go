/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd{}

// V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd struct for V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd
type V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd struct {
	Enabled *bool `json:"enabled,omitempty"`
	LocalMultiplier *int32 `json:"localMultiplier,omitempty"`
	MinimumInterval *int32 `json:"minimumInterval,omitempty"`
}

// NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd instantiates a new V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd {
	this := V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd{}
	return &this
}

// NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfdWithDefaults instantiates a new V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfdWithDefaults() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd {
	this := V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLocalMultiplier returns the LocalMultiplier field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) GetLocalMultiplier() int32 {
	if o == nil || IsNil(o.LocalMultiplier) {
		var ret int32
		return ret
	}
	return *o.LocalMultiplier
}

// GetLocalMultiplierOk returns a tuple with the LocalMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) GetLocalMultiplierOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalMultiplier) {
		return nil, false
	}
	return o.LocalMultiplier, true
}

// HasLocalMultiplier returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) HasLocalMultiplier() bool {
	if o != nil && !IsNil(o.LocalMultiplier) {
		return true
	}

	return false
}

// SetLocalMultiplier gets a reference to the given int32 and assigns it to the LocalMultiplier field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) SetLocalMultiplier(v int32) {
	o.LocalMultiplier = &v
}

// GetMinimumInterval returns the MinimumInterval field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) GetMinimumInterval() int32 {
	if o == nil || IsNil(o.MinimumInterval) {
		var ret int32
		return ret
	}
	return *o.MinimumInterval
}

// GetMinimumIntervalOk returns a tuple with the MinimumInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) GetMinimumIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumInterval) {
		return nil, false
	}
	return o.MinimumInterval, true
}

// HasMinimumInterval returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) HasMinimumInterval() bool {
	if o != nil && !IsNil(o.MinimumInterval) {
		return true
	}

	return false
}

// SetMinimumInterval gets a reference to the given int32 and assigns it to the MinimumInterval field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) SetMinimumInterval(v int32) {
	o.MinimumInterval = &v
}

func (o V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.LocalMultiplier) {
		toSerialize["localMultiplier"] = o.LocalMultiplier
	}
	if !IsNil(o.MinimumInterval) {
		toSerialize["minimumInterval"] = o.MinimumInterval
	}
	return toSerialize, nil
}

type NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd struct {
	value *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd
	isSet bool
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) Get() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd {
	return v.value
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) Set(val *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd(val *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd {
	return &NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd{value: val, isSet: true}
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfBgpNeighborsValueNeighborBfdBfd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


