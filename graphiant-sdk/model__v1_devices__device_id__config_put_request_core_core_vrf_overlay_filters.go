/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters{}

// V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters struct for V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters
type V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters struct {
	ExportPolicy *V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy `json:"exportPolicy,omitempty"`
	ImportPolicy *V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy `json:"importPolicy,omitempty"`
}

// NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters instantiates a new V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters {
	this := V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters{}
	return &this
}

// NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFiltersWithDefaults instantiates a new V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFiltersWithDefaults() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters {
	this := V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters{}
	return &this
}

// GetExportPolicy returns the ExportPolicy field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) GetExportPolicy() V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy {
	if o == nil || IsNil(o.ExportPolicy) {
		var ret V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy
		return ret
	}
	return *o.ExportPolicy
}

// GetExportPolicyOk returns a tuple with the ExportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) GetExportPolicyOk() (*V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy, bool) {
	if o == nil || IsNil(o.ExportPolicy) {
		return nil, false
	}
	return o.ExportPolicy, true
}

// HasExportPolicy returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) HasExportPolicy() bool {
	if o != nil && !IsNil(o.ExportPolicy) {
		return true
	}

	return false
}

// SetExportPolicy gets a reference to the given V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy and assigns it to the ExportPolicy field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) SetExportPolicy(v V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy) {
	o.ExportPolicy = &v
}

// GetImportPolicy returns the ImportPolicy field value if set, zero value otherwise.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) GetImportPolicy() V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy {
	if o == nil || IsNil(o.ImportPolicy) {
		var ret V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy
		return ret
	}
	return *o.ImportPolicy
}

// GetImportPolicyOk returns a tuple with the ImportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) GetImportPolicyOk() (*V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy, bool) {
	if o == nil || IsNil(o.ImportPolicy) {
		return nil, false
	}
	return o.ImportPolicy, true
}

// HasImportPolicy returns a boolean if a field has been set.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) HasImportPolicy() bool {
	if o != nil && !IsNil(o.ImportPolicy) {
		return true
	}

	return false
}

// SetImportPolicy gets a reference to the given V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy and assigns it to the ImportPolicy field.
func (o *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) SetImportPolicy(v V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy) {
	o.ImportPolicy = &v
}

func (o V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportPolicy) {
		toSerialize["exportPolicy"] = o.ExportPolicy
	}
	if !IsNil(o.ImportPolicy) {
		toSerialize["importPolicy"] = o.ImportPolicy
	}
	return toSerialize, nil
}

type NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters struct {
	value *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters
	isSet bool
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) Get() *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters {
	return v.value
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) Set(val *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters(val *V1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters {
	return &NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters{value: val, isSet: true}
}

func (v NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DevicesDeviceIdConfigPutRequestCoreCoreVrfOverlayFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


