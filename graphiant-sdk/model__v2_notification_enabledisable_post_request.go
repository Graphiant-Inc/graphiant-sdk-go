/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V2NotificationEnabledisablePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2NotificationEnabledisablePostRequest{}

// V2NotificationEnabledisablePostRequest struct for V2NotificationEnabledisablePostRequest
type V2NotificationEnabledisablePostRequest struct {
	Enable *bool `json:"enable,omitempty"`
	NotificationIdList []string `json:"notificationIdList,omitempty"`
}

// NewV2NotificationEnabledisablePostRequest instantiates a new V2NotificationEnabledisablePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2NotificationEnabledisablePostRequest() *V2NotificationEnabledisablePostRequest {
	this := V2NotificationEnabledisablePostRequest{}
	return &this
}

// NewV2NotificationEnabledisablePostRequestWithDefaults instantiates a new V2NotificationEnabledisablePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2NotificationEnabledisablePostRequestWithDefaults() *V2NotificationEnabledisablePostRequest {
	this := V2NotificationEnabledisablePostRequest{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *V2NotificationEnabledisablePostRequest) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationEnabledisablePostRequest) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *V2NotificationEnabledisablePostRequest) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *V2NotificationEnabledisablePostRequest) SetEnable(v bool) {
	o.Enable = &v
}

// GetNotificationIdList returns the NotificationIdList field value if set, zero value otherwise.
func (o *V2NotificationEnabledisablePostRequest) GetNotificationIdList() []string {
	if o == nil || IsNil(o.NotificationIdList) {
		var ret []string
		return ret
	}
	return o.NotificationIdList
}

// GetNotificationIdListOk returns a tuple with the NotificationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2NotificationEnabledisablePostRequest) GetNotificationIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationIdList) {
		return nil, false
	}
	return o.NotificationIdList, true
}

// HasNotificationIdList returns a boolean if a field has been set.
func (o *V2NotificationEnabledisablePostRequest) HasNotificationIdList() bool {
	if o != nil && !IsNil(o.NotificationIdList) {
		return true
	}

	return false
}

// SetNotificationIdList gets a reference to the given []string and assigns it to the NotificationIdList field.
func (o *V2NotificationEnabledisablePostRequest) SetNotificationIdList(v []string) {
	o.NotificationIdList = v
}

func (o V2NotificationEnabledisablePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2NotificationEnabledisablePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.NotificationIdList) {
		toSerialize["notificationIdList"] = o.NotificationIdList
	}
	return toSerialize, nil
}

type NullableV2NotificationEnabledisablePostRequest struct {
	value *V2NotificationEnabledisablePostRequest
	isSet bool
}

func (v NullableV2NotificationEnabledisablePostRequest) Get() *V2NotificationEnabledisablePostRequest {
	return v.value
}

func (v *NullableV2NotificationEnabledisablePostRequest) Set(val *V2NotificationEnabledisablePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2NotificationEnabledisablePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2NotificationEnabledisablePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2NotificationEnabledisablePostRequest(val *V2NotificationEnabledisablePostRequest) *NullableV2NotificationEnabledisablePostRequest {
	return &NullableV2NotificationEnabledisablePostRequest{value: val, isSet: true}
}

func (v NullableV2NotificationEnabledisablePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2NotificationEnabledisablePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


