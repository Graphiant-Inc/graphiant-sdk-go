/*
Graphiant APIs

**To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graphiant_sdk

import (
	"encoding/json"
)

// checks if the V1FlowsTopologyPostRequestAppSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1FlowsTopologyPostRequestAppSelector{}

// V1FlowsTopologyPostRequestAppSelector struct for V1FlowsTopologyPostRequestAppSelector
type V1FlowsTopologyPostRequestAppSelector struct {
	AppId *int32 `json:"appId,omitempty"`
	AppName *string `json:"appName,omitempty"`
	SlaClass *string `json:"slaClass,omitempty"`
}

// NewV1FlowsTopologyPostRequestAppSelector instantiates a new V1FlowsTopologyPostRequestAppSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1FlowsTopologyPostRequestAppSelector() *V1FlowsTopologyPostRequestAppSelector {
	this := V1FlowsTopologyPostRequestAppSelector{}
	return &this
}

// NewV1FlowsTopologyPostRequestAppSelectorWithDefaults instantiates a new V1FlowsTopologyPostRequestAppSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1FlowsTopologyPostRequestAppSelectorWithDefaults() *V1FlowsTopologyPostRequestAppSelector {
	this := V1FlowsTopologyPostRequestAppSelector{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *V1FlowsTopologyPostRequestAppSelector) GetAppId() int32 {
	if o == nil || IsNil(o.AppId) {
		var ret int32
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlowsTopologyPostRequestAppSelector) GetAppIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *V1FlowsTopologyPostRequestAppSelector) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given int32 and assigns it to the AppId field.
func (o *V1FlowsTopologyPostRequestAppSelector) SetAppId(v int32) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *V1FlowsTopologyPostRequestAppSelector) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlowsTopologyPostRequestAppSelector) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *V1FlowsTopologyPostRequestAppSelector) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *V1FlowsTopologyPostRequestAppSelector) SetAppName(v string) {
	o.AppName = &v
}

// GetSlaClass returns the SlaClass field value if set, zero value otherwise.
func (o *V1FlowsTopologyPostRequestAppSelector) GetSlaClass() string {
	if o == nil || IsNil(o.SlaClass) {
		var ret string
		return ret
	}
	return *o.SlaClass
}

// GetSlaClassOk returns a tuple with the SlaClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlowsTopologyPostRequestAppSelector) GetSlaClassOk() (*string, bool) {
	if o == nil || IsNil(o.SlaClass) {
		return nil, false
	}
	return o.SlaClass, true
}

// HasSlaClass returns a boolean if a field has been set.
func (o *V1FlowsTopologyPostRequestAppSelector) HasSlaClass() bool {
	if o != nil && !IsNil(o.SlaClass) {
		return true
	}

	return false
}

// SetSlaClass gets a reference to the given string and assigns it to the SlaClass field.
func (o *V1FlowsTopologyPostRequestAppSelector) SetSlaClass(v string) {
	o.SlaClass = &v
}

func (o V1FlowsTopologyPostRequestAppSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1FlowsTopologyPostRequestAppSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.SlaClass) {
		toSerialize["slaClass"] = o.SlaClass
	}
	return toSerialize, nil
}

type NullableV1FlowsTopologyPostRequestAppSelector struct {
	value *V1FlowsTopologyPostRequestAppSelector
	isSet bool
}

func (v NullableV1FlowsTopologyPostRequestAppSelector) Get() *V1FlowsTopologyPostRequestAppSelector {
	return v.value
}

func (v *NullableV1FlowsTopologyPostRequestAppSelector) Set(val *V1FlowsTopologyPostRequestAppSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FlowsTopologyPostRequestAppSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FlowsTopologyPostRequestAppSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FlowsTopologyPostRequestAppSelector(val *V1FlowsTopologyPostRequestAppSelector) *NullableV1FlowsTopologyPostRequestAppSelector {
	return &NullableV1FlowsTopologyPostRequestAppSelector{value: val, isSet: true}
}

func (v NullableV1FlowsTopologyPostRequestAppSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FlowsTopologyPostRequestAppSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


